// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `econ_gcmessages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CMsgGCGiftedItems)
pub struct CMsgGCGiftedItems {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.accountid)
    pub accountid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.giftdefindex)
    pub giftdefindex: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.max_gifts_possible)
    pub max_gifts_possible: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.num_eligible_recipients)
    pub num_eligible_recipients: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgGCGiftedItems.recipients_accountids)
    pub recipients_accountids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCGiftedItems.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCGiftedItems {
    fn default() -> &'a CMsgGCGiftedItems {
        <CMsgGCGiftedItems as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCGiftedItems {
    pub fn new() -> CMsgGCGiftedItems {
        ::std::default::Default::default()
    }

    // optional uint32 accountid = 1;

    pub fn accountid(&self) -> u32 {
        self.accountid.unwrap_or(0)
    }

    pub fn clear_accountid(&mut self) {
        self.accountid = ::std::option::Option::None;
    }

    pub fn has_accountid(&self) -> bool {
        self.accountid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accountid(&mut self, v: u32) {
        self.accountid = ::std::option::Option::Some(v);
    }

    // optional uint32 giftdefindex = 2;

    pub fn giftdefindex(&self) -> u32 {
        self.giftdefindex.unwrap_or(0)
    }

    pub fn clear_giftdefindex(&mut self) {
        self.giftdefindex = ::std::option::Option::None;
    }

    pub fn has_giftdefindex(&self) -> bool {
        self.giftdefindex.is_some()
    }

    // Param is passed by value, moved
    pub fn set_giftdefindex(&mut self, v: u32) {
        self.giftdefindex = ::std::option::Option::Some(v);
    }

    // optional uint32 max_gifts_possible = 3;

    pub fn max_gifts_possible(&self) -> u32 {
        self.max_gifts_possible.unwrap_or(0)
    }

    pub fn clear_max_gifts_possible(&mut self) {
        self.max_gifts_possible = ::std::option::Option::None;
    }

    pub fn has_max_gifts_possible(&self) -> bool {
        self.max_gifts_possible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_gifts_possible(&mut self, v: u32) {
        self.max_gifts_possible = ::std::option::Option::Some(v);
    }

    // optional uint32 num_eligible_recipients = 4;

    pub fn num_eligible_recipients(&self) -> u32 {
        self.num_eligible_recipients.unwrap_or(0)
    }

    pub fn clear_num_eligible_recipients(&mut self) {
        self.num_eligible_recipients = ::std::option::Option::None;
    }

    pub fn has_num_eligible_recipients(&self) -> bool {
        self.num_eligible_recipients.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_eligible_recipients(&mut self, v: u32) {
        self.num_eligible_recipients = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "accountid",
            |m: &CMsgGCGiftedItems| { &m.accountid },
            |m: &mut CMsgGCGiftedItems| { &mut m.accountid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "giftdefindex",
            |m: &CMsgGCGiftedItems| { &m.giftdefindex },
            |m: &mut CMsgGCGiftedItems| { &mut m.giftdefindex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "max_gifts_possible",
            |m: &CMsgGCGiftedItems| { &m.max_gifts_possible },
            |m: &mut CMsgGCGiftedItems| { &mut m.max_gifts_possible },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_eligible_recipients",
            |m: &CMsgGCGiftedItems| { &m.num_eligible_recipients },
            |m: &mut CMsgGCGiftedItems| { &mut m.num_eligible_recipients },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipients_accountids",
            |m: &CMsgGCGiftedItems| { &m.recipients_accountids },
            |m: &mut CMsgGCGiftedItems| { &mut m.recipients_accountids },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCGiftedItems>(
            "CMsgGCGiftedItems",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCGiftedItems {
    const NAME: &'static str = "CMsgGCGiftedItems";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.accountid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.giftdefindex = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.max_gifts_possible = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.num_eligible_recipients = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    is.read_repeated_packed_uint32_into(&mut self.recipients_accountids)?;
                },
                40 => {
                    self.recipients_accountids.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.accountid {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.giftdefindex {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.max_gifts_possible {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.num_eligible_recipients {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        for value in &self.recipients_accountids {
            my_size += ::protobuf::rt::uint32_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.accountid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.giftdefindex {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.max_gifts_possible {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.num_eligible_recipients {
            os.write_uint32(4, v)?;
        }
        for v in &self.recipients_accountids {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCGiftedItems {
        CMsgGCGiftedItems::new()
    }

    fn clear(&mut self) {
        self.accountid = ::std::option::Option::None;
        self.giftdefindex = ::std::option::Option::None;
        self.max_gifts_possible = ::std::option::Option::None;
        self.num_eligible_recipients = ::std::option::Option::None;
        self.recipients_accountids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCGiftedItems {
        static instance: CMsgGCGiftedItems = CMsgGCGiftedItems {
            accountid: ::std::option::Option::None,
            giftdefindex: ::std::option::Option::None,
            max_gifts_possible: ::std::option::Option::None,
            num_eligible_recipients: ::std::option::Option::None,
            recipients_accountids: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCGiftedItems {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCGiftedItems").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCGiftedItems {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCGiftedItems {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CMsgApplyAutograph)
pub struct CMsgApplyAutograph {
    // message fields
    // @@protoc_insertion_point(field:CMsgApplyAutograph.autograph_item_id)
    pub autograph_item_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgApplyAutograph.item_item_id)
    pub item_item_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgApplyAutograph.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgApplyAutograph {
    fn default() -> &'a CMsgApplyAutograph {
        <CMsgApplyAutograph as ::protobuf::Message>::default_instance()
    }
}

impl CMsgApplyAutograph {
    pub fn new() -> CMsgApplyAutograph {
        ::std::default::Default::default()
    }

    // optional uint64 autograph_item_id = 1;

    pub fn autograph_item_id(&self) -> u64 {
        self.autograph_item_id.unwrap_or(0)
    }

    pub fn clear_autograph_item_id(&mut self) {
        self.autograph_item_id = ::std::option::Option::None;
    }

    pub fn has_autograph_item_id(&self) -> bool {
        self.autograph_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_autograph_item_id(&mut self, v: u64) {
        self.autograph_item_id = ::std::option::Option::Some(v);
    }

    // optional uint64 item_item_id = 2;

    pub fn item_item_id(&self) -> u64 {
        self.item_item_id.unwrap_or(0)
    }

    pub fn clear_item_item_id(&mut self) {
        self.item_item_id = ::std::option::Option::None;
    }

    pub fn has_item_item_id(&self) -> bool {
        self.item_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_item_id(&mut self, v: u64) {
        self.item_item_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "autograph_item_id",
            |m: &CMsgApplyAutograph| { &m.autograph_item_id },
            |m: &mut CMsgApplyAutograph| { &mut m.autograph_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_item_id",
            |m: &CMsgApplyAutograph| { &m.item_item_id },
            |m: &mut CMsgApplyAutograph| { &mut m.item_item_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgApplyAutograph>(
            "CMsgApplyAutograph",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgApplyAutograph {
    const NAME: &'static str = "CMsgApplyAutograph";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.autograph_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.item_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.autograph_item_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.item_item_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.autograph_item_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.item_item_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgApplyAutograph {
        CMsgApplyAutograph::new()
    }

    fn clear(&mut self) {
        self.autograph_item_id = ::std::option::Option::None;
        self.item_item_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgApplyAutograph {
        static instance: CMsgApplyAutograph = CMsgApplyAutograph {
            autograph_item_id: ::std::option::Option::None,
            item_item_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgApplyAutograph {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgApplyAutograph").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgApplyAutograph {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgApplyAutograph {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CMsgCasketItem)
pub struct CMsgCasketItem {
    // message fields
    // @@protoc_insertion_point(field:CMsgCasketItem.casket_item_id)
    pub casket_item_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CMsgCasketItem.item_item_id)
    pub item_item_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgCasketItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgCasketItem {
    fn default() -> &'a CMsgCasketItem {
        <CMsgCasketItem as ::protobuf::Message>::default_instance()
    }
}

impl CMsgCasketItem {
    pub fn new() -> CMsgCasketItem {
        ::std::default::Default::default()
    }

    // optional uint64 casket_item_id = 1;

    pub fn casket_item_id(&self) -> u64 {
        self.casket_item_id.unwrap_or(0)
    }

    pub fn clear_casket_item_id(&mut self) {
        self.casket_item_id = ::std::option::Option::None;
    }

    pub fn has_casket_item_id(&self) -> bool {
        self.casket_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_casket_item_id(&mut self, v: u64) {
        self.casket_item_id = ::std::option::Option::Some(v);
    }

    // optional uint64 item_item_id = 2;

    pub fn item_item_id(&self) -> u64 {
        self.item_item_id.unwrap_or(0)
    }

    pub fn clear_item_item_id(&mut self) {
        self.item_item_id = ::std::option::Option::None;
    }

    pub fn has_item_item_id(&self) -> bool {
        self.item_item_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item_item_id(&mut self, v: u64) {
        self.item_item_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "casket_item_id",
            |m: &CMsgCasketItem| { &m.casket_item_id },
            |m: &mut CMsgCasketItem| { &mut m.casket_item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "item_item_id",
            |m: &CMsgCasketItem| { &m.item_item_id },
            |m: &mut CMsgCasketItem| { &mut m.item_item_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgCasketItem>(
            "CMsgCasketItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgCasketItem {
    const NAME: &'static str = "CMsgCasketItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.casket_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.item_item_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.casket_item_id {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.item_item_id {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.casket_item_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.item_item_id {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgCasketItem {
        CMsgCasketItem::new()
    }

    fn clear(&mut self) {
        self.casket_item_id = ::std::option::Option::None;
        self.item_item_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgCasketItem {
        static instance: CMsgCasketItem = CMsgCasketItem {
            casket_item_id: ::std::option::Option::None,
            item_item_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgCasketItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgCasketItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgCasketItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgCasketItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CMsgGCUserTrackTimePlayedConsecutively)
pub struct CMsgGCUserTrackTimePlayedConsecutively {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCUserTrackTimePlayedConsecutively.state)
    pub state: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCUserTrackTimePlayedConsecutively.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCUserTrackTimePlayedConsecutively {
    fn default() -> &'a CMsgGCUserTrackTimePlayedConsecutively {
        <CMsgGCUserTrackTimePlayedConsecutively as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCUserTrackTimePlayedConsecutively {
    pub fn new() -> CMsgGCUserTrackTimePlayedConsecutively {
        ::std::default::Default::default()
    }

    // optional uint32 state = 1;

    pub fn state(&self) -> u32 {
        self.state.unwrap_or(0)
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: u32) {
        self.state = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CMsgGCUserTrackTimePlayedConsecutively| { &m.state },
            |m: &mut CMsgGCUserTrackTimePlayedConsecutively| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCUserTrackTimePlayedConsecutively>(
            "CMsgGCUserTrackTimePlayedConsecutively",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCUserTrackTimePlayedConsecutively {
    const NAME: &'static str = "CMsgGCUserTrackTimePlayedConsecutively";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCUserTrackTimePlayedConsecutively {
        CMsgGCUserTrackTimePlayedConsecutively::new()
    }

    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCUserTrackTimePlayedConsecutively {
        static instance: CMsgGCUserTrackTimePlayedConsecutively = CMsgGCUserTrackTimePlayedConsecutively {
            state: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCUserTrackTimePlayedConsecutively {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCUserTrackTimePlayedConsecutively").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCUserTrackTimePlayedConsecutively {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCUserTrackTimePlayedConsecutively {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CMsgGCItemCustomizationNotification)
pub struct CMsgGCItemCustomizationNotification {
    // message fields
    // @@protoc_insertion_point(field:CMsgGCItemCustomizationNotification.item_id)
    pub item_id: ::std::vec::Vec<u64>,
    // @@protoc_insertion_point(field:CMsgGCItemCustomizationNotification.request)
    pub request: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGCItemCustomizationNotification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGCItemCustomizationNotification {
    fn default() -> &'a CMsgGCItemCustomizationNotification {
        <CMsgGCItemCustomizationNotification as ::protobuf::Message>::default_instance()
    }
}

impl CMsgGCItemCustomizationNotification {
    pub fn new() -> CMsgGCItemCustomizationNotification {
        ::std::default::Default::default()
    }

    // optional uint32 request = 2;

    pub fn request(&self) -> u32 {
        self.request.unwrap_or(0)
    }

    pub fn clear_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: u32) {
        self.request = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "item_id",
            |m: &CMsgGCItemCustomizationNotification| { &m.item_id },
            |m: &mut CMsgGCItemCustomizationNotification| { &mut m.item_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "request",
            |m: &CMsgGCItemCustomizationNotification| { &m.request },
            |m: &mut CMsgGCItemCustomizationNotification| { &mut m.request },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CMsgGCItemCustomizationNotification>(
            "CMsgGCItemCustomizationNotification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CMsgGCItemCustomizationNotification {
    const NAME: &'static str = "CMsgGCItemCustomizationNotification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint64_into(&mut self.item_id)?;
                },
                8 => {
                    self.item_id.push(is.read_uint64()?);
                },
                16 => {
                    self.request = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.item_id {
            my_size += ::protobuf::rt::uint64_size(1, *value);
        };
        if let Some(v) = self.request {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.item_id {
            os.write_uint64(1, *v)?;
        };
        if let Some(v) = self.request {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGCItemCustomizationNotification {
        CMsgGCItemCustomizationNotification::new()
    }

    fn clear(&mut self) {
        self.item_id.clear();
        self.request = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGCItemCustomizationNotification {
        static instance: CMsgGCItemCustomizationNotification = CMsgGCItemCustomizationNotification {
            item_id: ::std::vec::Vec::new(),
            request: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CMsgGCItemCustomizationNotification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CMsgGCItemCustomizationNotification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CMsgGCItemCustomizationNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CMsgGCItemCustomizationNotification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CAttribute_String)
pub struct CAttribute_String {
    // message fields
    // @@protoc_insertion_point(field:CAttribute_String.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:CAttribute_String.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CAttribute_String {
    fn default() -> &'a CAttribute_String {
        <CAttribute_String as ::protobuf::Message>::default_instance()
    }
}

impl CAttribute_String {
    pub fn new() -> CAttribute_String {
        ::std::default::Default::default()
    }

    // optional string value = 1;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &CAttribute_String| { &m.value },
            |m: &mut CAttribute_String| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CAttribute_String>(
            "CAttribute_String",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CAttribute_String {
    const NAME: &'static str = "CAttribute_String";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.value.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CAttribute_String {
        CAttribute_String::new()
    }

    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CAttribute_String {
        static instance: CAttribute_String = CAttribute_String {
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CAttribute_String {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CAttribute_String").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CAttribute_String {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CAttribute_String {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCItemMsg)
pub enum EGCItemMsg {
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBase)
    k_EMsgGCBase = 1000,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSetItemPosition)
    k_EMsgGCSetItemPosition = 1001,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCraft)
    k_EMsgGCCraft = 1002,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCraftResponse)
    k_EMsgGCCraftResponse = 1003,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDelete)
    k_EMsgGCDelete = 1004,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCVerifyCacheSubscription)
    k_EMsgGCVerifyCacheSubscription = 1005,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameItem)
    k_EMsgGCNameItem = 1006,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockCrate)
    k_EMsgGCUnlockCrate = 1007,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockCrateResponse)
    k_EMsgGCUnlockCrateResponse = 1008,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintItem)
    k_EMsgGCPaintItem = 1009,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintItemResponse)
    k_EMsgGCPaintItemResponse = 1010,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGoldenWrenchBroadcast)
    k_EMsgGCGoldenWrenchBroadcast = 1011,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCMOTDRequest)
    k_EMsgGCMOTDRequest = 1012,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCMOTDRequestResponse)
    k_EMsgGCMOTDRequestResponse = 1013,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddItemToSocket_DEPRECATED)
    k_EMsgGCAddItemToSocket_DEPRECATED = 1014,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddItemToSocketResponse_DEPRECATED)
    k_EMsgGCAddItemToSocketResponse_DEPRECATED = 1015,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddSocketToBaseItem_DEPRECATED)
    k_EMsgGCAddSocketToBaseItem_DEPRECATED = 1016,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddSocketToItem_DEPRECATED)
    k_EMsgGCAddSocketToItem_DEPRECATED = 1017,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAddSocketToItemResponse_DEPRECATED)
    k_EMsgGCAddSocketToItemResponse_DEPRECATED = 1018,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameBaseItem)
    k_EMsgGCNameBaseItem = 1019,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameBaseItemResponse)
    k_EMsgGCNameBaseItemResponse = 1020,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveSocketItem_DEPRECATED)
    k_EMsgGCRemoveSocketItem_DEPRECATED = 1021,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveSocketItemResponse_DEPRECATED)
    k_EMsgGCRemoveSocketItemResponse_DEPRECATED = 1022,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCustomizeItemTexture)
    k_EMsgGCCustomizeItemTexture = 1023,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCustomizeItemTextureResponse)
    k_EMsgGCCustomizeItemTextureResponse = 1024,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUseItemRequest)
    k_EMsgGCUseItemRequest = 1025,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUseItemResponse)
    k_EMsgGCUseItemResponse = 1026,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftedItems_DEPRECATED)
    k_EMsgGCGiftedItems_DEPRECATED = 1027,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveItemName)
    k_EMsgGCRemoveItemName = 1030,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveItemPaint)
    k_EMsgGCRemoveItemPaint = 1031,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftWrapItem)
    k_EMsgGCGiftWrapItem = 1032,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftWrapItemResponse)
    k_EMsgGCGiftWrapItemResponse = 1033,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDeliverGift)
    k_EMsgGCDeliverGift = 1034,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDeliverGiftResponseGiver)
    k_EMsgGCDeliverGiftResponseGiver = 1035,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDeliverGiftResponseReceiver)
    k_EMsgGCDeliverGiftResponseReceiver = 1036,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnwrapGiftRequest)
    k_EMsgGCUnwrapGiftRequest = 1037,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnwrapGiftResponse)
    k_EMsgGCUnwrapGiftResponse = 1038,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSetItemStyle)
    k_EMsgGCSetItemStyle = 1039,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUsedClaimCodeItem)
    k_EMsgGCUsedClaimCodeItem = 1040,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSortItems)
    k_EMsgGCSortItems = 1041,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_RevolvingLootList_DEPRECATED)
    k_EMsgGC_RevolvingLootList_DEPRECATED = 1042,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccount)
    k_EMsgGCLookupAccount = 1043,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccountResponse)
    k_EMsgGCLookupAccountResponse = 1044,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccountName)
    k_EMsgGCLookupAccountName = 1045,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCLookupAccountNameResponse)
    k_EMsgGCLookupAccountNameResponse = 1046,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUpdateItemSchema)
    k_EMsgGCUpdateItemSchema = 1049,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveCustomTexture)
    k_EMsgGCRemoveCustomTexture = 1051,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveCustomTextureResponse)
    k_EMsgGCRemoveCustomTextureResponse = 1052,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveMakersMark)
    k_EMsgGCRemoveMakersMark = 1053,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveMakersMarkResponse)
    k_EMsgGCRemoveMakersMarkResponse = 1054,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveUniqueCraftIndex)
    k_EMsgGCRemoveUniqueCraftIndex = 1055,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRemoveUniqueCraftIndexResponse)
    k_EMsgGCRemoveUniqueCraftIndexResponse = 1056,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSaxxyBroadcast)
    k_EMsgGCSaxxyBroadcast = 1057,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBackpackSortFinished)
    k_EMsgGCBackpackSortFinished = 1058,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustItemEquippedState)
    k_EMsgGCAdjustItemEquippedState = 1059,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCollectItem)
    k_EMsgGCCollectItem = 1061,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemAcknowledged__DEPRECATED)
    k_EMsgGCItemAcknowledged__DEPRECATED = 1062,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_ReportAbuse)
    k_EMsgGC_ReportAbuse = 1065,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_ReportAbuseResponse)
    k_EMsgGC_ReportAbuseResponse = 1066,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameItemNotification)
    k_EMsgGCNameItemNotification = 1068,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyConsumableEffects)
    k_EMsgGCApplyConsumableEffects = 1069,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCConsumableExhausted)
    k_EMsgGCConsumableExhausted = 1070,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCShowItemsPickedUp)
    k_EMsgGCShowItemsPickedUp = 1071,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCClientDisplayNotification)
    k_EMsgGCClientDisplayNotification = 1072,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyStrangePart)
    k_EMsgGCApplyStrangePart = 1073,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_IncrementKillCountAttribute)
    k_EMsgGC_IncrementKillCountAttribute = 1074,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGC_IncrementKillCountResponse)
    k_EMsgGC_IncrementKillCountResponse = 1075,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyPennantUpgrade)
    k_EMsgGCApplyPennantUpgrade = 1076,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCSetItemPositions)
    k_EMsgGCSetItemPositions = 1077,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplyEggEssence)
    k_EMsgGCApplyEggEssence = 1078,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCNameEggEssenceResponse)
    k_EMsgGCNameEggEssenceResponse = 1079,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintKitItem)
    k_EMsgGCPaintKitItem = 1080,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintKitBaseItem)
    k_EMsgGCPaintKitBaseItem = 1081,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCPaintKitItemResponse)
    k_EMsgGCPaintKitItemResponse = 1082,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCGiftedItems)
    k_EMsgGCGiftedItems = 1083,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockItemStyle)
    k_EMsgGCUnlockItemStyle = 1084,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUnlockItemStyleResponse)
    k_EMsgGCUnlockItemStyleResponse = 1085,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCApplySticker)
    k_EMsgGCApplySticker = 1086,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemAcknowledged)
    k_EMsgGCItemAcknowledged = 1087,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStatTrakSwap)
    k_EMsgGCStatTrakSwap = 1088,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCUserTrackTimePlayedConsecutively)
    k_EMsgGCUserTrackTimePlayedConsecutively = 1089,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemCustomizationNotification)
    k_EMsgGCItemCustomizationNotification = 1090,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCModifyItemAttribute)
    k_EMsgGCModifyItemAttribute = 1091,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCasketItemAdd)
    k_EMsgGCCasketItemAdd = 1092,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCasketItemExtract)
    k_EMsgGCCasketItemExtract = 1093,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCCasketItemLoadContents)
    k_EMsgGCCasketItemLoadContents = 1094,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTradingBase)
    k_EMsgGCTradingBase = 1500,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_InitiateTradeRequest)
    k_EMsgGCTrading_InitiateTradeRequest = 1501,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_InitiateTradeResponse)
    k_EMsgGCTrading_InitiateTradeResponse = 1502,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_StartSession)
    k_EMsgGCTrading_StartSession = 1503,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_SetItem)
    k_EMsgGCTrading_SetItem = 1504,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_RemoveItem)
    k_EMsgGCTrading_RemoveItem = 1505,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_UpdateTradeInfo)
    k_EMsgGCTrading_UpdateTradeInfo = 1506,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_SetReadiness)
    k_EMsgGCTrading_SetReadiness = 1507,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_ReadinessResponse)
    k_EMsgGCTrading_ReadinessResponse = 1508,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_SessionClosed)
    k_EMsgGCTrading_SessionClosed = 1509,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_CancelSession)
    k_EMsgGCTrading_CancelSession = 1510,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_TradeChatMsg)
    k_EMsgGCTrading_TradeChatMsg = 1511,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_ConfirmOffer)
    k_EMsgGCTrading_ConfirmOffer = 1512,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCTrading_TradeTypingChatMsg)
    k_EMsgGCTrading_TradeTypingChatMsg = 1513,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerBrowser_FavoriteServer)
    k_EMsgGCServerBrowser_FavoriteServer = 1601,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerBrowser_BlacklistServer)
    k_EMsgGCServerBrowser_BlacklistServer = 1602,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerRentalsBase)
    k_EMsgGCServerRentalsBase = 1700,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewCheckStatus)
    k_EMsgGCItemPreviewCheckStatus = 1701,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewStatusResponse)
    k_EMsgGCItemPreviewStatusResponse = 1702,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewRequest)
    k_EMsgGCItemPreviewRequest = 1703,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewRequestResponse)
    k_EMsgGCItemPreviewRequestResponse = 1704,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewExpire)
    k_EMsgGCItemPreviewExpire = 1705,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewExpireNotification)
    k_EMsgGCItemPreviewExpireNotification = 1706,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCItemPreviewItemBoughtNotification)
    k_EMsgGCItemPreviewItemBoughtNotification = 1707,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_NewItemRequest)
    k_EMsgGCDev_NewItemRequest = 2001,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_NewItemRequestResponse)
    k_EMsgGCDev_NewItemRequestResponse = 2002,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCDev_PaintKitDropItem)
    k_EMsgGCDev_PaintKitDropItem = 2003,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStoreGetUserData)
    k_EMsgGCStoreGetUserData = 2500,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStoreGetUserDataResponse)
    k_EMsgGCStoreGetUserDataResponse = 2501,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInit_DEPRECATED)
    k_EMsgGCStorePurchaseInit_DEPRECATED = 2502,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInitResponse_DEPRECATED)
    k_EMsgGCStorePurchaseInitResponse_DEPRECATED = 2503,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseFinalize)
    k_EMsgGCStorePurchaseFinalize = 2504,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseFinalizeResponse)
    k_EMsgGCStorePurchaseFinalizeResponse = 2505,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseCancel)
    k_EMsgGCStorePurchaseCancel = 2506,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseCancelResponse)
    k_EMsgGCStorePurchaseCancelResponse = 2507,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseQueryTxn)
    k_EMsgGCStorePurchaseQueryTxn = 2508,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseQueryTxnResponse)
    k_EMsgGCStorePurchaseQueryTxnResponse = 2509,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInit)
    k_EMsgGCStorePurchaseInit = 2510,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCStorePurchaseInitResponse)
    k_EMsgGCStorePurchaseInitResponse = 2511,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBannedWordListRequest)
    k_EMsgGCBannedWordListRequest = 2512,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCBannedWordListResponse)
    k_EMsgGCBannedWordListResponse = 2513,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCBannedWordListBroadcast)
    k_EMsgGCToGCBannedWordListBroadcast = 2514,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCBannedWordListUpdated)
    k_EMsgGCToGCBannedWordListUpdated = 2515,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCDirtySDOCache)
    k_EMsgGCToGCDirtySDOCache = 2516,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCDirtyMultipleSDOCache)
    k_EMsgGCToGCDirtyMultipleSDOCache = 2517,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCUpdateSQLKeyValue)
    k_EMsgGCToGCUpdateSQLKeyValue = 2518,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCIsTrustedServer)
    k_EMsgGCToGCIsTrustedServer = 2519,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCIsTrustedServerResponse)
    k_EMsgGCToGCIsTrustedServerResponse = 2520,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCBroadcastConsoleCommand)
    k_EMsgGCToGCBroadcastConsoleCommand = 2521,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCServerVersionUpdated)
    k_EMsgGCServerVersionUpdated = 2522,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCToGCWebAPIAccountChanged)
    k_EMsgGCToGCWebAPIAccountChanged = 2524,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRequestAnnouncements)
    k_EMsgGCRequestAnnouncements = 2525,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRequestAnnouncementsResponse)
    k_EMsgGCRequestAnnouncementsResponse = 2526,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRequestPassportItemGrant)
    k_EMsgGCRequestPassportItemGrant = 2527,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCClientVersionUpdated)
    k_EMsgGCClientVersionUpdated = 2528,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustItemEquippedStateMulti)
    k_EMsgGCAdjustItemEquippedStateMulti = 2529,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCRecurringSubscriptionStatus)
    k_EMsgGCRecurringSubscriptionStatus = 2530,
    // @@protoc_insertion_point(enum_value:EGCItemMsg.k_EMsgGCAdjustEquipSlots)
    k_EMsgGCAdjustEquipSlots = 2531,
}

impl ::protobuf::Enum for EGCItemMsg {
    const NAME: &'static str = "EGCItemMsg";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCItemMsg> {
        match value {
            1000 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBase),
            1001 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemPosition),
            1002 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCraft),
            1003 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCraftResponse),
            1004 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDelete),
            1005 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCVerifyCacheSubscription),
            1006 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItem),
            1007 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockCrate),
            1008 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockCrateResponse),
            1009 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintItem),
            1010 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintItemResponse),
            1011 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGoldenWrenchBroadcast),
            1012 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCMOTDRequest),
            1013 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCMOTDRequestResponse),
            1014 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddItemToSocket_DEPRECATED),
            1015 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddItemToSocketResponse_DEPRECATED),
            1016 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToBaseItem_DEPRECATED),
            1017 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToItem_DEPRECATED),
            1018 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAddSocketToItemResponse_DEPRECATED),
            1019 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameBaseItem),
            1020 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameBaseItemResponse),
            1021 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveSocketItem_DEPRECATED),
            1022 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveSocketItemResponse_DEPRECATED),
            1023 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCustomizeItemTexture),
            1024 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCustomizeItemTextureResponse),
            1025 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUseItemRequest),
            1026 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUseItemResponse),
            1027 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftedItems_DEPRECATED),
            1030 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveItemName),
            1031 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveItemPaint),
            1032 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftWrapItem),
            1033 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftWrapItemResponse),
            1034 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGift),
            1035 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGiftResponseGiver),
            1036 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDeliverGiftResponseReceiver),
            1037 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnwrapGiftRequest),
            1038 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnwrapGiftResponse),
            1039 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemStyle),
            1040 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUsedClaimCodeItem),
            1041 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSortItems),
            1042 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_RevolvingLootList_DEPRECATED),
            1043 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccount),
            1044 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountResponse),
            1045 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountName),
            1046 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCLookupAccountNameResponse),
            1049 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUpdateItemSchema),
            1051 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveCustomTexture),
            1052 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveCustomTextureResponse),
            1053 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveMakersMark),
            1054 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveMakersMarkResponse),
            1055 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndex),
            1056 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndexResponse),
            1057 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSaxxyBroadcast),
            1058 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBackpackSortFinished),
            1059 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustItemEquippedState),
            1061 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCollectItem),
            1062 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemAcknowledged__DEPRECATED),
            1065 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_ReportAbuse),
            1066 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_ReportAbuseResponse),
            1068 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameItemNotification),
            1069 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyConsumableEffects),
            1070 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCConsumableExhausted),
            1071 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCShowItemsPickedUp),
            1072 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCClientDisplayNotification),
            1073 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyStrangePart),
            1074 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_IncrementKillCountAttribute),
            1075 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGC_IncrementKillCountResponse),
            1076 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyPennantUpgrade),
            1077 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCSetItemPositions),
            1078 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplyEggEssence),
            1079 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCNameEggEssenceResponse),
            1080 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitItem),
            1081 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitBaseItem),
            1082 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCPaintKitItemResponse),
            1083 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCGiftedItems),
            1084 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockItemStyle),
            1085 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUnlockItemStyleResponse),
            1086 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCApplySticker),
            1087 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemAcknowledged),
            1088 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStatTrakSwap),
            1089 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively),
            1090 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemCustomizationNotification),
            1091 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCModifyItemAttribute),
            1092 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemAdd),
            1093 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemExtract),
            1094 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCCasketItemLoadContents),
            1500 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTradingBase),
            1501 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_InitiateTradeRequest),
            1502 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_InitiateTradeResponse),
            1503 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_StartSession),
            1504 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SetItem),
            1505 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_RemoveItem),
            1506 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_UpdateTradeInfo),
            1507 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SetReadiness),
            1508 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_ReadinessResponse),
            1509 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_SessionClosed),
            1510 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_CancelSession),
            1511 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_TradeChatMsg),
            1512 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_ConfirmOffer),
            1513 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCTrading_TradeTypingChatMsg),
            1601 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerBrowser_FavoriteServer),
            1602 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerBrowser_BlacklistServer),
            1700 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerRentalsBase),
            1701 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewCheckStatus),
            1702 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewStatusResponse),
            1703 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewRequest),
            1704 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewRequestResponse),
            1705 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewExpire),
            1706 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewExpireNotification),
            1707 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCItemPreviewItemBoughtNotification),
            2001 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_NewItemRequest),
            2002 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_NewItemRequestResponse),
            2003 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCDev_PaintKitDropItem),
            2500 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStoreGetUserData),
            2501 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStoreGetUserDataResponse),
            2502 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInit_DEPRECATED),
            2503 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInitResponse_DEPRECATED),
            2504 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseFinalize),
            2505 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseFinalizeResponse),
            2506 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseCancel),
            2507 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseCancelResponse),
            2508 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseQueryTxn),
            2509 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseQueryTxnResponse),
            2510 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInit),
            2511 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCStorePurchaseInitResponse),
            2512 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBannedWordListRequest),
            2513 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCBannedWordListResponse),
            2514 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBannedWordListBroadcast),
            2515 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBannedWordListUpdated),
            2516 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCDirtySDOCache),
            2517 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCDirtyMultipleSDOCache),
            2518 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCUpdateSQLKeyValue),
            2519 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCIsTrustedServer),
            2520 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCIsTrustedServerResponse),
            2521 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCBroadcastConsoleCommand),
            2522 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCServerVersionUpdated),
            2524 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCToGCWebAPIAccountChanged),
            2525 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestAnnouncements),
            2526 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestAnnouncementsResponse),
            2527 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRequestPassportItemGrant),
            2528 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCClientVersionUpdated),
            2529 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustItemEquippedStateMulti),
            2530 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCRecurringSubscriptionStatus),
            2531 => ::std::option::Option::Some(EGCItemMsg::k_EMsgGCAdjustEquipSlots),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCItemMsg] = &[
        EGCItemMsg::k_EMsgGCBase,
        EGCItemMsg::k_EMsgGCSetItemPosition,
        EGCItemMsg::k_EMsgGCCraft,
        EGCItemMsg::k_EMsgGCCraftResponse,
        EGCItemMsg::k_EMsgGCDelete,
        EGCItemMsg::k_EMsgGCVerifyCacheSubscription,
        EGCItemMsg::k_EMsgGCNameItem,
        EGCItemMsg::k_EMsgGCUnlockCrate,
        EGCItemMsg::k_EMsgGCUnlockCrateResponse,
        EGCItemMsg::k_EMsgGCPaintItem,
        EGCItemMsg::k_EMsgGCPaintItemResponse,
        EGCItemMsg::k_EMsgGCGoldenWrenchBroadcast,
        EGCItemMsg::k_EMsgGCMOTDRequest,
        EGCItemMsg::k_EMsgGCMOTDRequestResponse,
        EGCItemMsg::k_EMsgGCAddItemToSocket_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddItemToSocketResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddSocketToBaseItem_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddSocketToItem_DEPRECATED,
        EGCItemMsg::k_EMsgGCAddSocketToItemResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCNameBaseItem,
        EGCItemMsg::k_EMsgGCNameBaseItemResponse,
        EGCItemMsg::k_EMsgGCRemoveSocketItem_DEPRECATED,
        EGCItemMsg::k_EMsgGCRemoveSocketItemResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCCustomizeItemTexture,
        EGCItemMsg::k_EMsgGCCustomizeItemTextureResponse,
        EGCItemMsg::k_EMsgGCUseItemRequest,
        EGCItemMsg::k_EMsgGCUseItemResponse,
        EGCItemMsg::k_EMsgGCGiftedItems_DEPRECATED,
        EGCItemMsg::k_EMsgGCRemoveItemName,
        EGCItemMsg::k_EMsgGCRemoveItemPaint,
        EGCItemMsg::k_EMsgGCGiftWrapItem,
        EGCItemMsg::k_EMsgGCGiftWrapItemResponse,
        EGCItemMsg::k_EMsgGCDeliverGift,
        EGCItemMsg::k_EMsgGCDeliverGiftResponseGiver,
        EGCItemMsg::k_EMsgGCDeliverGiftResponseReceiver,
        EGCItemMsg::k_EMsgGCUnwrapGiftRequest,
        EGCItemMsg::k_EMsgGCUnwrapGiftResponse,
        EGCItemMsg::k_EMsgGCSetItemStyle,
        EGCItemMsg::k_EMsgGCUsedClaimCodeItem,
        EGCItemMsg::k_EMsgGCSortItems,
        EGCItemMsg::k_EMsgGC_RevolvingLootList_DEPRECATED,
        EGCItemMsg::k_EMsgGCLookupAccount,
        EGCItemMsg::k_EMsgGCLookupAccountResponse,
        EGCItemMsg::k_EMsgGCLookupAccountName,
        EGCItemMsg::k_EMsgGCLookupAccountNameResponse,
        EGCItemMsg::k_EMsgGCUpdateItemSchema,
        EGCItemMsg::k_EMsgGCRemoveCustomTexture,
        EGCItemMsg::k_EMsgGCRemoveCustomTextureResponse,
        EGCItemMsg::k_EMsgGCRemoveMakersMark,
        EGCItemMsg::k_EMsgGCRemoveMakersMarkResponse,
        EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndex,
        EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndexResponse,
        EGCItemMsg::k_EMsgGCSaxxyBroadcast,
        EGCItemMsg::k_EMsgGCBackpackSortFinished,
        EGCItemMsg::k_EMsgGCAdjustItemEquippedState,
        EGCItemMsg::k_EMsgGCCollectItem,
        EGCItemMsg::k_EMsgGCItemAcknowledged__DEPRECATED,
        EGCItemMsg::k_EMsgGC_ReportAbuse,
        EGCItemMsg::k_EMsgGC_ReportAbuseResponse,
        EGCItemMsg::k_EMsgGCNameItemNotification,
        EGCItemMsg::k_EMsgGCApplyConsumableEffects,
        EGCItemMsg::k_EMsgGCConsumableExhausted,
        EGCItemMsg::k_EMsgGCShowItemsPickedUp,
        EGCItemMsg::k_EMsgGCClientDisplayNotification,
        EGCItemMsg::k_EMsgGCApplyStrangePart,
        EGCItemMsg::k_EMsgGC_IncrementKillCountAttribute,
        EGCItemMsg::k_EMsgGC_IncrementKillCountResponse,
        EGCItemMsg::k_EMsgGCApplyPennantUpgrade,
        EGCItemMsg::k_EMsgGCSetItemPositions,
        EGCItemMsg::k_EMsgGCApplyEggEssence,
        EGCItemMsg::k_EMsgGCNameEggEssenceResponse,
        EGCItemMsg::k_EMsgGCPaintKitItem,
        EGCItemMsg::k_EMsgGCPaintKitBaseItem,
        EGCItemMsg::k_EMsgGCPaintKitItemResponse,
        EGCItemMsg::k_EMsgGCGiftedItems,
        EGCItemMsg::k_EMsgGCUnlockItemStyle,
        EGCItemMsg::k_EMsgGCUnlockItemStyleResponse,
        EGCItemMsg::k_EMsgGCApplySticker,
        EGCItemMsg::k_EMsgGCItemAcknowledged,
        EGCItemMsg::k_EMsgGCStatTrakSwap,
        EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively,
        EGCItemMsg::k_EMsgGCItemCustomizationNotification,
        EGCItemMsg::k_EMsgGCModifyItemAttribute,
        EGCItemMsg::k_EMsgGCCasketItemAdd,
        EGCItemMsg::k_EMsgGCCasketItemExtract,
        EGCItemMsg::k_EMsgGCCasketItemLoadContents,
        EGCItemMsg::k_EMsgGCTradingBase,
        EGCItemMsg::k_EMsgGCTrading_InitiateTradeRequest,
        EGCItemMsg::k_EMsgGCTrading_InitiateTradeResponse,
        EGCItemMsg::k_EMsgGCTrading_StartSession,
        EGCItemMsg::k_EMsgGCTrading_SetItem,
        EGCItemMsg::k_EMsgGCTrading_RemoveItem,
        EGCItemMsg::k_EMsgGCTrading_UpdateTradeInfo,
        EGCItemMsg::k_EMsgGCTrading_SetReadiness,
        EGCItemMsg::k_EMsgGCTrading_ReadinessResponse,
        EGCItemMsg::k_EMsgGCTrading_SessionClosed,
        EGCItemMsg::k_EMsgGCTrading_CancelSession,
        EGCItemMsg::k_EMsgGCTrading_TradeChatMsg,
        EGCItemMsg::k_EMsgGCTrading_ConfirmOffer,
        EGCItemMsg::k_EMsgGCTrading_TradeTypingChatMsg,
        EGCItemMsg::k_EMsgGCServerBrowser_FavoriteServer,
        EGCItemMsg::k_EMsgGCServerBrowser_BlacklistServer,
        EGCItemMsg::k_EMsgGCServerRentalsBase,
        EGCItemMsg::k_EMsgGCItemPreviewCheckStatus,
        EGCItemMsg::k_EMsgGCItemPreviewStatusResponse,
        EGCItemMsg::k_EMsgGCItemPreviewRequest,
        EGCItemMsg::k_EMsgGCItemPreviewRequestResponse,
        EGCItemMsg::k_EMsgGCItemPreviewExpire,
        EGCItemMsg::k_EMsgGCItemPreviewExpireNotification,
        EGCItemMsg::k_EMsgGCItemPreviewItemBoughtNotification,
        EGCItemMsg::k_EMsgGCDev_NewItemRequest,
        EGCItemMsg::k_EMsgGCDev_NewItemRequestResponse,
        EGCItemMsg::k_EMsgGCDev_PaintKitDropItem,
        EGCItemMsg::k_EMsgGCStoreGetUserData,
        EGCItemMsg::k_EMsgGCStoreGetUserDataResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseInit_DEPRECATED,
        EGCItemMsg::k_EMsgGCStorePurchaseInitResponse_DEPRECATED,
        EGCItemMsg::k_EMsgGCStorePurchaseFinalize,
        EGCItemMsg::k_EMsgGCStorePurchaseFinalizeResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseCancel,
        EGCItemMsg::k_EMsgGCStorePurchaseCancelResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseQueryTxn,
        EGCItemMsg::k_EMsgGCStorePurchaseQueryTxnResponse,
        EGCItemMsg::k_EMsgGCStorePurchaseInit,
        EGCItemMsg::k_EMsgGCStorePurchaseInitResponse,
        EGCItemMsg::k_EMsgGCBannedWordListRequest,
        EGCItemMsg::k_EMsgGCBannedWordListResponse,
        EGCItemMsg::k_EMsgGCToGCBannedWordListBroadcast,
        EGCItemMsg::k_EMsgGCToGCBannedWordListUpdated,
        EGCItemMsg::k_EMsgGCToGCDirtySDOCache,
        EGCItemMsg::k_EMsgGCToGCDirtyMultipleSDOCache,
        EGCItemMsg::k_EMsgGCToGCUpdateSQLKeyValue,
        EGCItemMsg::k_EMsgGCToGCIsTrustedServer,
        EGCItemMsg::k_EMsgGCToGCIsTrustedServerResponse,
        EGCItemMsg::k_EMsgGCToGCBroadcastConsoleCommand,
        EGCItemMsg::k_EMsgGCServerVersionUpdated,
        EGCItemMsg::k_EMsgGCToGCWebAPIAccountChanged,
        EGCItemMsg::k_EMsgGCRequestAnnouncements,
        EGCItemMsg::k_EMsgGCRequestAnnouncementsResponse,
        EGCItemMsg::k_EMsgGCRequestPassportItemGrant,
        EGCItemMsg::k_EMsgGCClientVersionUpdated,
        EGCItemMsg::k_EMsgGCAdjustItemEquippedStateMulti,
        EGCItemMsg::k_EMsgGCRecurringSubscriptionStatus,
        EGCItemMsg::k_EMsgGCAdjustEquipSlots,
    ];
}

impl ::protobuf::EnumFull for EGCItemMsg {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCItemMsg").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCItemMsg::k_EMsgGCBase => 0,
            EGCItemMsg::k_EMsgGCSetItemPosition => 1,
            EGCItemMsg::k_EMsgGCCraft => 2,
            EGCItemMsg::k_EMsgGCCraftResponse => 3,
            EGCItemMsg::k_EMsgGCDelete => 4,
            EGCItemMsg::k_EMsgGCVerifyCacheSubscription => 5,
            EGCItemMsg::k_EMsgGCNameItem => 6,
            EGCItemMsg::k_EMsgGCUnlockCrate => 7,
            EGCItemMsg::k_EMsgGCUnlockCrateResponse => 8,
            EGCItemMsg::k_EMsgGCPaintItem => 9,
            EGCItemMsg::k_EMsgGCPaintItemResponse => 10,
            EGCItemMsg::k_EMsgGCGoldenWrenchBroadcast => 11,
            EGCItemMsg::k_EMsgGCMOTDRequest => 12,
            EGCItemMsg::k_EMsgGCMOTDRequestResponse => 13,
            EGCItemMsg::k_EMsgGCAddItemToSocket_DEPRECATED => 14,
            EGCItemMsg::k_EMsgGCAddItemToSocketResponse_DEPRECATED => 15,
            EGCItemMsg::k_EMsgGCAddSocketToBaseItem_DEPRECATED => 16,
            EGCItemMsg::k_EMsgGCAddSocketToItem_DEPRECATED => 17,
            EGCItemMsg::k_EMsgGCAddSocketToItemResponse_DEPRECATED => 18,
            EGCItemMsg::k_EMsgGCNameBaseItem => 19,
            EGCItemMsg::k_EMsgGCNameBaseItemResponse => 20,
            EGCItemMsg::k_EMsgGCRemoveSocketItem_DEPRECATED => 21,
            EGCItemMsg::k_EMsgGCRemoveSocketItemResponse_DEPRECATED => 22,
            EGCItemMsg::k_EMsgGCCustomizeItemTexture => 23,
            EGCItemMsg::k_EMsgGCCustomizeItemTextureResponse => 24,
            EGCItemMsg::k_EMsgGCUseItemRequest => 25,
            EGCItemMsg::k_EMsgGCUseItemResponse => 26,
            EGCItemMsg::k_EMsgGCGiftedItems_DEPRECATED => 27,
            EGCItemMsg::k_EMsgGCRemoveItemName => 28,
            EGCItemMsg::k_EMsgGCRemoveItemPaint => 29,
            EGCItemMsg::k_EMsgGCGiftWrapItem => 30,
            EGCItemMsg::k_EMsgGCGiftWrapItemResponse => 31,
            EGCItemMsg::k_EMsgGCDeliverGift => 32,
            EGCItemMsg::k_EMsgGCDeliverGiftResponseGiver => 33,
            EGCItemMsg::k_EMsgGCDeliverGiftResponseReceiver => 34,
            EGCItemMsg::k_EMsgGCUnwrapGiftRequest => 35,
            EGCItemMsg::k_EMsgGCUnwrapGiftResponse => 36,
            EGCItemMsg::k_EMsgGCSetItemStyle => 37,
            EGCItemMsg::k_EMsgGCUsedClaimCodeItem => 38,
            EGCItemMsg::k_EMsgGCSortItems => 39,
            EGCItemMsg::k_EMsgGC_RevolvingLootList_DEPRECATED => 40,
            EGCItemMsg::k_EMsgGCLookupAccount => 41,
            EGCItemMsg::k_EMsgGCLookupAccountResponse => 42,
            EGCItemMsg::k_EMsgGCLookupAccountName => 43,
            EGCItemMsg::k_EMsgGCLookupAccountNameResponse => 44,
            EGCItemMsg::k_EMsgGCUpdateItemSchema => 45,
            EGCItemMsg::k_EMsgGCRemoveCustomTexture => 46,
            EGCItemMsg::k_EMsgGCRemoveCustomTextureResponse => 47,
            EGCItemMsg::k_EMsgGCRemoveMakersMark => 48,
            EGCItemMsg::k_EMsgGCRemoveMakersMarkResponse => 49,
            EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndex => 50,
            EGCItemMsg::k_EMsgGCRemoveUniqueCraftIndexResponse => 51,
            EGCItemMsg::k_EMsgGCSaxxyBroadcast => 52,
            EGCItemMsg::k_EMsgGCBackpackSortFinished => 53,
            EGCItemMsg::k_EMsgGCAdjustItemEquippedState => 54,
            EGCItemMsg::k_EMsgGCCollectItem => 55,
            EGCItemMsg::k_EMsgGCItemAcknowledged__DEPRECATED => 56,
            EGCItemMsg::k_EMsgGC_ReportAbuse => 57,
            EGCItemMsg::k_EMsgGC_ReportAbuseResponse => 58,
            EGCItemMsg::k_EMsgGCNameItemNotification => 59,
            EGCItemMsg::k_EMsgGCApplyConsumableEffects => 60,
            EGCItemMsg::k_EMsgGCConsumableExhausted => 61,
            EGCItemMsg::k_EMsgGCShowItemsPickedUp => 62,
            EGCItemMsg::k_EMsgGCClientDisplayNotification => 63,
            EGCItemMsg::k_EMsgGCApplyStrangePart => 64,
            EGCItemMsg::k_EMsgGC_IncrementKillCountAttribute => 65,
            EGCItemMsg::k_EMsgGC_IncrementKillCountResponse => 66,
            EGCItemMsg::k_EMsgGCApplyPennantUpgrade => 67,
            EGCItemMsg::k_EMsgGCSetItemPositions => 68,
            EGCItemMsg::k_EMsgGCApplyEggEssence => 69,
            EGCItemMsg::k_EMsgGCNameEggEssenceResponse => 70,
            EGCItemMsg::k_EMsgGCPaintKitItem => 71,
            EGCItemMsg::k_EMsgGCPaintKitBaseItem => 72,
            EGCItemMsg::k_EMsgGCPaintKitItemResponse => 73,
            EGCItemMsg::k_EMsgGCGiftedItems => 74,
            EGCItemMsg::k_EMsgGCUnlockItemStyle => 75,
            EGCItemMsg::k_EMsgGCUnlockItemStyleResponse => 76,
            EGCItemMsg::k_EMsgGCApplySticker => 77,
            EGCItemMsg::k_EMsgGCItemAcknowledged => 78,
            EGCItemMsg::k_EMsgGCStatTrakSwap => 79,
            EGCItemMsg::k_EMsgGCUserTrackTimePlayedConsecutively => 80,
            EGCItemMsg::k_EMsgGCItemCustomizationNotification => 81,
            EGCItemMsg::k_EMsgGCModifyItemAttribute => 82,
            EGCItemMsg::k_EMsgGCCasketItemAdd => 83,
            EGCItemMsg::k_EMsgGCCasketItemExtract => 84,
            EGCItemMsg::k_EMsgGCCasketItemLoadContents => 85,
            EGCItemMsg::k_EMsgGCTradingBase => 86,
            EGCItemMsg::k_EMsgGCTrading_InitiateTradeRequest => 87,
            EGCItemMsg::k_EMsgGCTrading_InitiateTradeResponse => 88,
            EGCItemMsg::k_EMsgGCTrading_StartSession => 89,
            EGCItemMsg::k_EMsgGCTrading_SetItem => 90,
            EGCItemMsg::k_EMsgGCTrading_RemoveItem => 91,
            EGCItemMsg::k_EMsgGCTrading_UpdateTradeInfo => 92,
            EGCItemMsg::k_EMsgGCTrading_SetReadiness => 93,
            EGCItemMsg::k_EMsgGCTrading_ReadinessResponse => 94,
            EGCItemMsg::k_EMsgGCTrading_SessionClosed => 95,
            EGCItemMsg::k_EMsgGCTrading_CancelSession => 96,
            EGCItemMsg::k_EMsgGCTrading_TradeChatMsg => 97,
            EGCItemMsg::k_EMsgGCTrading_ConfirmOffer => 98,
            EGCItemMsg::k_EMsgGCTrading_TradeTypingChatMsg => 99,
            EGCItemMsg::k_EMsgGCServerBrowser_FavoriteServer => 100,
            EGCItemMsg::k_EMsgGCServerBrowser_BlacklistServer => 101,
            EGCItemMsg::k_EMsgGCServerRentalsBase => 102,
            EGCItemMsg::k_EMsgGCItemPreviewCheckStatus => 103,
            EGCItemMsg::k_EMsgGCItemPreviewStatusResponse => 104,
            EGCItemMsg::k_EMsgGCItemPreviewRequest => 105,
            EGCItemMsg::k_EMsgGCItemPreviewRequestResponse => 106,
            EGCItemMsg::k_EMsgGCItemPreviewExpire => 107,
            EGCItemMsg::k_EMsgGCItemPreviewExpireNotification => 108,
            EGCItemMsg::k_EMsgGCItemPreviewItemBoughtNotification => 109,
            EGCItemMsg::k_EMsgGCDev_NewItemRequest => 110,
            EGCItemMsg::k_EMsgGCDev_NewItemRequestResponse => 111,
            EGCItemMsg::k_EMsgGCDev_PaintKitDropItem => 112,
            EGCItemMsg::k_EMsgGCStoreGetUserData => 113,
            EGCItemMsg::k_EMsgGCStoreGetUserDataResponse => 114,
            EGCItemMsg::k_EMsgGCStorePurchaseInit_DEPRECATED => 115,
            EGCItemMsg::k_EMsgGCStorePurchaseInitResponse_DEPRECATED => 116,
            EGCItemMsg::k_EMsgGCStorePurchaseFinalize => 117,
            EGCItemMsg::k_EMsgGCStorePurchaseFinalizeResponse => 118,
            EGCItemMsg::k_EMsgGCStorePurchaseCancel => 119,
            EGCItemMsg::k_EMsgGCStorePurchaseCancelResponse => 120,
            EGCItemMsg::k_EMsgGCStorePurchaseQueryTxn => 121,
            EGCItemMsg::k_EMsgGCStorePurchaseQueryTxnResponse => 122,
            EGCItemMsg::k_EMsgGCStorePurchaseInit => 123,
            EGCItemMsg::k_EMsgGCStorePurchaseInitResponse => 124,
            EGCItemMsg::k_EMsgGCBannedWordListRequest => 125,
            EGCItemMsg::k_EMsgGCBannedWordListResponse => 126,
            EGCItemMsg::k_EMsgGCToGCBannedWordListBroadcast => 127,
            EGCItemMsg::k_EMsgGCToGCBannedWordListUpdated => 128,
            EGCItemMsg::k_EMsgGCToGCDirtySDOCache => 129,
            EGCItemMsg::k_EMsgGCToGCDirtyMultipleSDOCache => 130,
            EGCItemMsg::k_EMsgGCToGCUpdateSQLKeyValue => 131,
            EGCItemMsg::k_EMsgGCToGCIsTrustedServer => 132,
            EGCItemMsg::k_EMsgGCToGCIsTrustedServerResponse => 133,
            EGCItemMsg::k_EMsgGCToGCBroadcastConsoleCommand => 134,
            EGCItemMsg::k_EMsgGCServerVersionUpdated => 135,
            EGCItemMsg::k_EMsgGCToGCWebAPIAccountChanged => 136,
            EGCItemMsg::k_EMsgGCRequestAnnouncements => 137,
            EGCItemMsg::k_EMsgGCRequestAnnouncementsResponse => 138,
            EGCItemMsg::k_EMsgGCRequestPassportItemGrant => 139,
            EGCItemMsg::k_EMsgGCClientVersionUpdated => 140,
            EGCItemMsg::k_EMsgGCAdjustItemEquippedStateMulti => 141,
            EGCItemMsg::k_EMsgGCRecurringSubscriptionStatus => 142,
            EGCItemMsg::k_EMsgGCAdjustEquipSlots => 143,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCItemMsg {
    fn default() -> Self {
        EGCItemMsg::k_EMsgGCBase
    }
}

impl EGCItemMsg {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCItemMsg>("EGCItemMsg")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCMsgResponse)
pub enum EGCMsgResponse {
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseOK)
    k_EGCMsgResponseOK = 0,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseDenied)
    k_EGCMsgResponseDenied = 1,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseServerError)
    k_EGCMsgResponseServerError = 2,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseTimeout)
    k_EGCMsgResponseTimeout = 3,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseInvalid)
    k_EGCMsgResponseInvalid = 4,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseNoMatch)
    k_EGCMsgResponseNoMatch = 5,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseUnknownError)
    k_EGCMsgResponseUnknownError = 6,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgResponseNotLoggedOn)
    k_EGCMsgResponseNotLoggedOn = 7,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgFailedToCreate)
    k_EGCMsgFailedToCreate = 8,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgLimitExceeded)
    k_EGCMsgLimitExceeded = 9,
    // @@protoc_insertion_point(enum_value:EGCMsgResponse.k_EGCMsgCommitUnfinalized)
    k_EGCMsgCommitUnfinalized = 10,
}

impl ::protobuf::Enum for EGCMsgResponse {
    const NAME: &'static str = "EGCMsgResponse";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCMsgResponse> {
        match value {
            0 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseOK),
            1 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseDenied),
            2 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseServerError),
            3 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseTimeout),
            4 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseInvalid),
            5 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNoMatch),
            6 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseUnknownError),
            7 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgResponseNotLoggedOn),
            8 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgFailedToCreate),
            9 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgLimitExceeded),
            10 => ::std::option::Option::Some(EGCMsgResponse::k_EGCMsgCommitUnfinalized),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCMsgResponse] = &[
        EGCMsgResponse::k_EGCMsgResponseOK,
        EGCMsgResponse::k_EGCMsgResponseDenied,
        EGCMsgResponse::k_EGCMsgResponseServerError,
        EGCMsgResponse::k_EGCMsgResponseTimeout,
        EGCMsgResponse::k_EGCMsgResponseInvalid,
        EGCMsgResponse::k_EGCMsgResponseNoMatch,
        EGCMsgResponse::k_EGCMsgResponseUnknownError,
        EGCMsgResponse::k_EGCMsgResponseNotLoggedOn,
        EGCMsgResponse::k_EGCMsgFailedToCreate,
        EGCMsgResponse::k_EGCMsgLimitExceeded,
        EGCMsgResponse::k_EGCMsgCommitUnfinalized,
    ];
}

impl ::protobuf::EnumFull for EGCMsgResponse {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCMsgResponse").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EGCMsgResponse {
    fn default() -> Self {
        EGCMsgResponse::k_EGCMsgResponseOK
    }
}

impl EGCMsgResponse {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCMsgResponse>("EGCMsgResponse")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EUnlockStyle)
pub enum EUnlockStyle {
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Succeeded)
    k_UnlockStyle_Succeeded = 0,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_PreReq)
    k_UnlockStyle_Failed_PreReq = 1,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantAfford)
    k_UnlockStyle_Failed_CantAfford = 2,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantCommit)
    k_UnlockStyle_Failed_CantCommit = 3,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantLockCache)
    k_UnlockStyle_Failed_CantLockCache = 4,
    // @@protoc_insertion_point(enum_value:EUnlockStyle.k_UnlockStyle_Failed_CantAffordAttrib)
    k_UnlockStyle_Failed_CantAffordAttrib = 5,
}

impl ::protobuf::Enum for EUnlockStyle {
    const NAME: &'static str = "EUnlockStyle";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EUnlockStyle> {
        match value {
            0 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Succeeded),
            1 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_PreReq),
            2 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantAfford),
            3 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantCommit),
            4 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantLockCache),
            5 => ::std::option::Option::Some(EUnlockStyle::k_UnlockStyle_Failed_CantAffordAttrib),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EUnlockStyle] = &[
        EUnlockStyle::k_UnlockStyle_Succeeded,
        EUnlockStyle::k_UnlockStyle_Failed_PreReq,
        EUnlockStyle::k_UnlockStyle_Failed_CantAfford,
        EUnlockStyle::k_UnlockStyle_Failed_CantCommit,
        EUnlockStyle::k_UnlockStyle_Failed_CantLockCache,
        EUnlockStyle::k_UnlockStyle_Failed_CantAffordAttrib,
    ];
}

impl ::protobuf::EnumFull for EUnlockStyle {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EUnlockStyle").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EUnlockStyle {
    fn default() -> Self {
        EUnlockStyle::k_UnlockStyle_Succeeded
    }
}

impl EUnlockStyle {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EUnlockStyle>("EUnlockStyle")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EGCItemCustomizationNotification)
pub enum EGCItemCustomizationNotification {
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_NameItem)
    k_EGCItemCustomizationNotification_NameItem = 1006,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_UnlockCrate)
    k_EGCItemCustomizationNotification_UnlockCrate = 1007,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_XRayItemReveal)
    k_EGCItemCustomizationNotification_XRayItemReveal = 1008,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_XRayItemClaim)
    k_EGCItemCustomizationNotification_XRayItemClaim = 1009,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketTooFull)
    k_EGCItemCustomizationNotification_CasketTooFull = 1011,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketContents)
    k_EGCItemCustomizationNotification_CasketContents = 1012,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketAdded)
    k_EGCItemCustomizationNotification_CasketAdded = 1013,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketRemoved)
    k_EGCItemCustomizationNotification_CasketRemoved = 1014,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_CasketInvFull)
    k_EGCItemCustomizationNotification_CasketInvFull = 1015,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_NameBaseItem)
    k_EGCItemCustomizationNotification_NameBaseItem = 1019,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_RemoveItemName)
    k_EGCItemCustomizationNotification_RemoveItemName = 1030,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_RemoveSticker)
    k_EGCItemCustomizationNotification_RemoveSticker = 1053,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ApplySticker)
    k_EGCItemCustomizationNotification_ApplySticker = 1086,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_StatTrakSwap)
    k_EGCItemCustomizationNotification_StatTrakSwap = 1088,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_RemovePatch)
    k_EGCItemCustomizationNotification_RemovePatch = 1089,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ApplyPatch)
    k_EGCItemCustomizationNotification_ApplyPatch = 1090,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ActivateFanToken)
    k_EGCItemCustomizationNotification_ActivateFanToken = 9178,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ActivateOperationCoin)
    k_EGCItemCustomizationNotification_ActivateOperationCoin = 9179,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_GraffitiUnseal)
    k_EGCItemCustomizationNotification_GraffitiUnseal = 9185,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_GenerateSouvenir)
    k_EGCItemCustomizationNotification_GenerateSouvenir = 9204,
    // @@protoc_insertion_point(enum_value:EGCItemCustomizationNotification.k_EGCItemCustomizationNotification_ClientRedeemMissionReward)
    k_EGCItemCustomizationNotification_ClientRedeemMissionReward = 9209,
}

impl ::protobuf::Enum for EGCItemCustomizationNotification {
    const NAME: &'static str = "EGCItemCustomizationNotification";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EGCItemCustomizationNotification> {
        match value {
            1006 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem),
            1007 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_UnlockCrate),
            1008 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemReveal),
            1009 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemClaim),
            1011 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketTooFull),
            1012 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketContents),
            1013 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketAdded),
            1014 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketRemoved),
            1015 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketInvFull),
            1019 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameBaseItem),
            1030 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveItemName),
            1053 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveSticker),
            1086 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplySticker),
            1088 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_StatTrakSwap),
            1089 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemovePatch),
            1090 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplyPatch),
            9178 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateFanToken),
            9179 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateOperationCoin),
            9185 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GraffitiUnseal),
            9204 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GenerateSouvenir),
            9209 => ::std::option::Option::Some(EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemMissionReward),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EGCItemCustomizationNotification] = &[
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_UnlockCrate,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemReveal,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemClaim,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketTooFull,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketContents,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketAdded,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketRemoved,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketInvFull,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameBaseItem,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveItemName,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveSticker,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplySticker,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_StatTrakSwap,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemovePatch,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplyPatch,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateFanToken,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateOperationCoin,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GraffitiUnseal,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GenerateSouvenir,
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemMissionReward,
    ];
}

impl ::protobuf::EnumFull for EGCItemCustomizationNotification {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EGCItemCustomizationNotification").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem => 0,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_UnlockCrate => 1,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemReveal => 2,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_XRayItemClaim => 3,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketTooFull => 4,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketContents => 5,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketAdded => 6,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketRemoved => 7,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_CasketInvFull => 8,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameBaseItem => 9,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveItemName => 10,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemoveSticker => 11,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplySticker => 12,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_StatTrakSwap => 13,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_RemovePatch => 14,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ApplyPatch => 15,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateFanToken => 16,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ActivateOperationCoin => 17,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GraffitiUnseal => 18,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_GenerateSouvenir => 19,
            EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_ClientRedeemMissionReward => 20,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for EGCItemCustomizationNotification {
    fn default() -> Self {
        EGCItemCustomizationNotification::k_EGCItemCustomizationNotification_NameItem
    }
}

impl EGCItemCustomizationNotification {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EGCItemCustomizationNotification>("EGCItemCustomizationNotification")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15econ_gcmessages.proto\x1a\x13steammessages.proto\"\xf0\x01\n\x11CM\
    sgGCGiftedItems\x12\x1c\n\taccountid\x18\x01\x20\x01(\rR\taccountid\x12\
    \"\n\x0cgiftdefindex\x18\x02\x20\x01(\rR\x0cgiftdefindex\x12,\n\x12max_g\
    ifts_possible\x18\x03\x20\x01(\rR\x10maxGiftsPossible\x126\n\x17num_elig\
    ible_recipients\x18\x04\x20\x01(\rR\x15numEligibleRecipients\x123\n\x15r\
    ecipients_accountids\x18\x05\x20\x03(\rR\x14recipientsAccountids\"b\n\
    \x12CMsgApplyAutograph\x12*\n\x11autograph_item_id\x18\x01\x20\x01(\x04R\
    \x0fautographItemId\x12\x20\n\x0citem_item_id\x18\x02\x20\x01(\x04R\nite\
    mItemId\"X\n\x0eCMsgCasketItem\x12$\n\x0ecasket_item_id\x18\x01\x20\x01(\
    \x04R\x0ccasketItemId\x12\x20\n\x0citem_item_id\x18\x02\x20\x01(\x04R\ni\
    temItemId\">\n&CMsgGCUserTrackTimePlayedConsecutively\x12\x14\n\x05state\
    \x18\x01\x20\x01(\rR\x05state\"X\n#CMsgGCItemCustomizationNotification\
    \x12\x17\n\x07item_id\x18\x01\x20\x03(\x04R\x06itemId\x12\x18\n\x07reque\
    st\x18\x02\x20\x01(\rR\x07request\")\n\x11CAttribute_String\x12\x14\n\
    \x05value\x18\x01\x20\x01(\tR\x05value*\x89(\n\nEGCItemMsg\x12\x11\n\x0c\
    k_EMsgGCBase\x10\xe8\x07\x12\x1c\n\x17k_EMsgGCSetItemPosition\x10\xe9\
    \x07\x12\x12\n\rk_EMsgGCCraft\x10\xea\x07\x12\x1a\n\x15k_EMsgGCCraftResp\
    onse\x10\xeb\x07\x12\x13\n\x0ek_EMsgGCDelete\x10\xec\x07\x12$\n\x1fk_EMs\
    gGCVerifyCacheSubscription\x10\xed\x07\x12\x15\n\x10k_EMsgGCNameItem\x10\
    \xee\x07\x12\x18\n\x13k_EMsgGCUnlockCrate\x10\xef\x07\x12\x20\n\x1bk_EMs\
    gGCUnlockCrateResponse\x10\xf0\x07\x12\x16\n\x11k_EMsgGCPaintItem\x10\
    \xf1\x07\x12\x1e\n\x19k_EMsgGCPaintItemResponse\x10\xf2\x07\x12\"\n\x1dk\
    _EMsgGCGoldenWrenchBroadcast\x10\xf3\x07\x12\x18\n\x13k_EMsgGCMOTDReques\
    t\x10\xf4\x07\x12\x20\n\x1bk_EMsgGCMOTDRequestResponse\x10\xf5\x07\x12'\
    \n\"k_EMsgGCAddItemToSocket_DEPRECATED\x10\xf6\x07\x12/\n*k_EMsgGCAddIte\
    mToSocketResponse_DEPRECATED\x10\xf7\x07\x12+\n&k_EMsgGCAddSocketToBaseI\
    tem_DEPRECATED\x10\xf8\x07\x12'\n\"k_EMsgGCAddSocketToItem_DEPRECATED\
    \x10\xf9\x07\x12/\n*k_EMsgGCAddSocketToItemResponse_DEPRECATED\x10\xfa\
    \x07\x12\x19\n\x14k_EMsgGCNameBaseItem\x10\xfb\x07\x12!\n\x1ck_EMsgGCNam\
    eBaseItemResponse\x10\xfc\x07\x12(\n#k_EMsgGCRemoveSocketItem_DEPRECATED\
    \x10\xfd\x07\x120\n+k_EMsgGCRemoveSocketItemResponse_DEPRECATED\x10\xfe\
    \x07\x12!\n\x1ck_EMsgGCCustomizeItemTexture\x10\xff\x07\x12)\n$k_EMsgGCC\
    ustomizeItemTextureResponse\x10\x80\x08\x12\x1b\n\x16k_EMsgGCUseItemRequ\
    est\x10\x81\x08\x12\x1c\n\x17k_EMsgGCUseItemResponse\x10\x82\x08\x12#\n\
    \x1ek_EMsgGCGiftedItems_DEPRECATED\x10\x83\x08\x12\x1b\n\x16k_EMsgGCRemo\
    veItemName\x10\x86\x08\x12\x1c\n\x17k_EMsgGCRemoveItemPaint\x10\x87\x08\
    \x12\x19\n\x14k_EMsgGCGiftWrapItem\x10\x88\x08\x12!\n\x1ck_EMsgGCGiftWra\
    pItemResponse\x10\x89\x08\x12\x18\n\x13k_EMsgGCDeliverGift\x10\x8a\x08\
    \x12%\n\x20k_EMsgGCDeliverGiftResponseGiver\x10\x8b\x08\x12(\n#k_EMsgGCD\
    eliverGiftResponseReceiver\x10\x8c\x08\x12\x1e\n\x19k_EMsgGCUnwrapGiftRe\
    quest\x10\x8d\x08\x12\x1f\n\x1ak_EMsgGCUnwrapGiftResponse\x10\x8e\x08\
    \x12\x19\n\x14k_EMsgGCSetItemStyle\x10\x8f\x08\x12\x1e\n\x19k_EMsgGCUsed\
    ClaimCodeItem\x10\x90\x08\x12\x16\n\x11k_EMsgGCSortItems\x10\x91\x08\x12\
    *\n%k_EMsgGC_RevolvingLootList_DEPRECATED\x10\x92\x08\x12\x1a\n\x15k_EMs\
    gGCLookupAccount\x10\x93\x08\x12\"\n\x1dk_EMsgGCLookupAccountResponse\
    \x10\x94\x08\x12\x1e\n\x19k_EMsgGCLookupAccountName\x10\x95\x08\x12&\n!k\
    _EMsgGCLookupAccountNameResponse\x10\x96\x08\x12\x1d\n\x18k_EMsgGCUpdate\
    ItemSchema\x10\x99\x08\x12\x20\n\x1bk_EMsgGCRemoveCustomTexture\x10\x9b\
    \x08\x12(\n#k_EMsgGCRemoveCustomTextureResponse\x10\x9c\x08\x12\x1d\n\
    \x18k_EMsgGCRemoveMakersMark\x10\x9d\x08\x12%\n\x20k_EMsgGCRemoveMakersM\
    arkResponse\x10\x9e\x08\x12#\n\x1ek_EMsgGCRemoveUniqueCraftIndex\x10\x9f\
    \x08\x12+\n&k_EMsgGCRemoveUniqueCraftIndexResponse\x10\xa0\x08\x12\x1b\n\
    \x16k_EMsgGCSaxxyBroadcast\x10\xa1\x08\x12!\n\x1ck_EMsgGCBackpackSortFin\
    ished\x10\xa2\x08\x12$\n\x1fk_EMsgGCAdjustItemEquippedState\x10\xa3\x08\
    \x12\x18\n\x13k_EMsgGCCollectItem\x10\xa5\x08\x12)\n$k_EMsgGCItemAcknowl\
    edged__DEPRECATED\x10\xa6\x08\x12\x19\n\x14k_EMsgGC_ReportAbuse\x10\xa9\
    \x08\x12!\n\x1ck_EMsgGC_ReportAbuseResponse\x10\xaa\x08\x12!\n\x1ck_EMsg\
    GCNameItemNotification\x10\xac\x08\x12#\n\x1ek_EMsgGCApplyConsumableEffe\
    cts\x10\xad\x08\x12\x20\n\x1bk_EMsgGCConsumableExhausted\x10\xae\x08\x12\
    \x1e\n\x19k_EMsgGCShowItemsPickedUp\x10\xaf\x08\x12&\n!k_EMsgGCClientDis\
    playNotification\x10\xb0\x08\x12\x1d\n\x18k_EMsgGCApplyStrangePart\x10\
    \xb1\x08\x12)\n$k_EMsgGC_IncrementKillCountAttribute\x10\xb2\x08\x12(\n#\
    k_EMsgGC_IncrementKillCountResponse\x10\xb3\x08\x12\x20\n\x1bk_EMsgGCApp\
    lyPennantUpgrade\x10\xb4\x08\x12\x1d\n\x18k_EMsgGCSetItemPositions\x10\
    \xb5\x08\x12\x1c\n\x17k_EMsgGCApplyEggEssence\x10\xb6\x08\x12#\n\x1ek_EM\
    sgGCNameEggEssenceResponse\x10\xb7\x08\x12\x19\n\x14k_EMsgGCPaintKitItem\
    \x10\xb8\x08\x12\x1d\n\x18k_EMsgGCPaintKitBaseItem\x10\xb9\x08\x12!\n\
    \x1ck_EMsgGCPaintKitItemResponse\x10\xba\x08\x12\x18\n\x13k_EMsgGCGifted\
    Items\x10\xbb\x08\x12\x1c\n\x17k_EMsgGCUnlockItemStyle\x10\xbc\x08\x12$\
    \n\x1fk_EMsgGCUnlockItemStyleResponse\x10\xbd\x08\x12\x19\n\x14k_EMsgGCA\
    pplySticker\x10\xbe\x08\x12\x1d\n\x18k_EMsgGCItemAcknowledged\x10\xbf\
    \x08\x12\x19\n\x14k_EMsgGCStatTrakSwap\x10\xc0\x08\x12-\n(k_EMsgGCUserTr\
    ackTimePlayedConsecutively\x10\xc1\x08\x12*\n%k_EMsgGCItemCustomizationN\
    otification\x10\xc2\x08\x12\x20\n\x1bk_EMsgGCModifyItemAttribute\x10\xc3\
    \x08\x12\x1a\n\x15k_EMsgGCCasketItemAdd\x10\xc4\x08\x12\x1e\n\x19k_EMsgG\
    CCasketItemExtract\x10\xc5\x08\x12#\n\x1ek_EMsgGCCasketItemLoadContents\
    \x10\xc6\x08\x12\x18\n\x13k_EMsgGCTradingBase\x10\xdc\x0b\x12)\n$k_EMsgG\
    CTrading_InitiateTradeRequest\x10\xdd\x0b\x12*\n%k_EMsgGCTrading_Initiat\
    eTradeResponse\x10\xde\x0b\x12!\n\x1ck_EMsgGCTrading_StartSession\x10\
    \xdf\x0b\x12\x1c\n\x17k_EMsgGCTrading_SetItem\x10\xe0\x0b\x12\x1f\n\x1ak\
    _EMsgGCTrading_RemoveItem\x10\xe1\x0b\x12$\n\x1fk_EMsgGCTrading_UpdateTr\
    adeInfo\x10\xe2\x0b\x12!\n\x1ck_EMsgGCTrading_SetReadiness\x10\xe3\x0b\
    \x12&\n!k_EMsgGCTrading_ReadinessResponse\x10\xe4\x0b\x12\"\n\x1dk_EMsgG\
    CTrading_SessionClosed\x10\xe5\x0b\x12\"\n\x1dk_EMsgGCTrading_CancelSess\
    ion\x10\xe6\x0b\x12!\n\x1ck_EMsgGCTrading_TradeChatMsg\x10\xe7\x0b\x12!\
    \n\x1ck_EMsgGCTrading_ConfirmOffer\x10\xe8\x0b\x12'\n\"k_EMsgGCTrading_T\
    radeTypingChatMsg\x10\xe9\x0b\x12)\n$k_EMsgGCServerBrowser_FavoriteServe\
    r\x10\xc1\x0c\x12*\n%k_EMsgGCServerBrowser_BlacklistServer\x10\xc2\x0c\
    \x12\x1e\n\x19k_EMsgGCServerRentalsBase\x10\xa4\r\x12#\n\x1ek_EMsgGCItem\
    PreviewCheckStatus\x10\xa5\r\x12&\n!k_EMsgGCItemPreviewStatusResponse\
    \x10\xa6\r\x12\x1f\n\x1ak_EMsgGCItemPreviewRequest\x10\xa7\r\x12'\n\"k_E\
    MsgGCItemPreviewRequestResponse\x10\xa8\r\x12\x1e\n\x19k_EMsgGCItemPrevi\
    ewExpire\x10\xa9\r\x12*\n%k_EMsgGCItemPreviewExpireNotification\x10\xaa\
    \r\x12.\n)k_EMsgGCItemPreviewItemBoughtNotification\x10\xab\r\x12\x1f\n\
    \x1ak_EMsgGCDev_NewItemRequest\x10\xd1\x0f\x12'\n\"k_EMsgGCDev_NewItemRe\
    questResponse\x10\xd2\x0f\x12!\n\x1ck_EMsgGCDev_PaintKitDropItem\x10\xd3\
    \x0f\x12\x1d\n\x18k_EMsgGCStoreGetUserData\x10\xc4\x13\x12%\n\x20k_EMsgG\
    CStoreGetUserDataResponse\x10\xc5\x13\x12)\n$k_EMsgGCStorePurchaseInit_D\
    EPRECATED\x10\xc6\x13\x121\n,k_EMsgGCStorePurchaseInitResponse_DEPRECATE\
    D\x10\xc7\x13\x12\"\n\x1dk_EMsgGCStorePurchaseFinalize\x10\xc8\x13\x12*\
    \n%k_EMsgGCStorePurchaseFinalizeResponse\x10\xc9\x13\x12\x20\n\x1bk_EMsg\
    GCStorePurchaseCancel\x10\xca\x13\x12(\n#k_EMsgGCStorePurchaseCancelResp\
    onse\x10\xcb\x13\x12\"\n\x1dk_EMsgGCStorePurchaseQueryTxn\x10\xcc\x13\
    \x12*\n%k_EMsgGCStorePurchaseQueryTxnResponse\x10\xcd\x13\x12\x1e\n\x19k\
    _EMsgGCStorePurchaseInit\x10\xce\x13\x12&\n!k_EMsgGCStorePurchaseInitRes\
    ponse\x10\xcf\x13\x12\"\n\x1dk_EMsgGCBannedWordListRequest\x10\xd0\x13\
    \x12#\n\x1ek_EMsgGCBannedWordListResponse\x10\xd1\x13\x12(\n#k_EMsgGCToG\
    CBannedWordListBroadcast\x10\xd2\x13\x12&\n!k_EMsgGCToGCBannedWordListUp\
    dated\x10\xd3\x13\x12\x1e\n\x19k_EMsgGCToGCDirtySDOCache\x10\xd4\x13\x12\
    &\n!k_EMsgGCToGCDirtyMultipleSDOCache\x10\xd5\x13\x12\"\n\x1dk_EMsgGCToG\
    CUpdateSQLKeyValue\x10\xd6\x13\x12\x20\n\x1bk_EMsgGCToGCIsTrustedServer\
    \x10\xd7\x13\x12(\n#k_EMsgGCToGCIsTrustedServerResponse\x10\xd8\x13\x12(\
    \n#k_EMsgGCToGCBroadcastConsoleCommand\x10\xd9\x13\x12!\n\x1ck_EMsgGCSer\
    verVersionUpdated\x10\xda\x13\x12%\n\x20k_EMsgGCToGCWebAPIAccountChanged\
    \x10\xdc\x13\x12!\n\x1ck_EMsgGCRequestAnnouncements\x10\xdd\x13\x12)\n$k\
    _EMsgGCRequestAnnouncementsResponse\x10\xde\x13\x12%\n\x20k_EMsgGCReques\
    tPassportItemGrant\x10\xdf\x13\x12!\n\x1ck_EMsgGCClientVersionUpdated\
    \x10\xe0\x13\x12)\n$k_EMsgGCAdjustItemEquippedStateMulti\x10\xe1\x13\x12\
    (\n#k_EMsgGCRecurringSubscriptionStatus\x10\xe2\x13\x12\x1d\n\x18k_EMsgG\
    CAdjustEquipSlots\x10\xe3\x13*\xd5\x02\n\x0eEGCMsgResponse\x12\x16\n\x12\
    k_EGCMsgResponseOK\x10\0\x12\x1a\n\x16k_EGCMsgResponseDenied\x10\x01\x12\
    \x1f\n\x1bk_EGCMsgResponseServerError\x10\x02\x12\x1b\n\x17k_EGCMsgRespo\
    nseTimeout\x10\x03\x12\x1b\n\x17k_EGCMsgResponseInvalid\x10\x04\x12\x1b\
    \n\x17k_EGCMsgResponseNoMatch\x10\x05\x12\x20\n\x1ck_EGCMsgResponseUnkno\
    wnError\x10\x06\x12\x1f\n\x1bk_EGCMsgResponseNotLoggedOn\x10\x07\x12\x1a\
    \n\x16k_EGCMsgFailedToCreate\x10\x08\x12\x19\n\x15k_EGCMsgLimitExceeded\
    \x10\t\x12\x1d\n\x19k_EGCMsgCommitUnfinalized\x10\n*\xe9\x01\n\x0cEUnloc\
    kStyle\x12\x1b\n\x17k_UnlockStyle_Succeeded\x10\0\x12\x1f\n\x1bk_UnlockS\
    tyle_Failed_PreReq\x10\x01\x12#\n\x1fk_UnlockStyle_Failed_CantAfford\x10\
    \x02\x12#\n\x1fk_UnlockStyle_Failed_CantCommit\x10\x03\x12&\n\"k_UnlockS\
    tyle_Failed_CantLockCache\x10\x04\x12)\n%k_UnlockStyle_Failed_CantAfford\
    Attrib\x10\x05*\xb2\t\n\x20EGCItemCustomizationNotification\x120\n+k_EGC\
    ItemCustomizationNotification_NameItem\x10\xee\x07\x123\n.k_EGCItemCusto\
    mizationNotification_UnlockCrate\x10\xef\x07\x126\n1k_EGCItemCustomizati\
    onNotification_XRayItemReveal\x10\xf0\x07\x125\n0k_EGCItemCustomizationN\
    otification_XRayItemClaim\x10\xf1\x07\x125\n0k_EGCItemCustomizationNotif\
    ication_CasketTooFull\x10\xf3\x07\x126\n1k_EGCItemCustomizationNotificat\
    ion_CasketContents\x10\xf4\x07\x123\n.k_EGCItemCustomizationNotification\
    _CasketAdded\x10\xf5\x07\x125\n0k_EGCItemCustomizationNotification_Caske\
    tRemoved\x10\xf6\x07\x125\n0k_EGCItemCustomizationNotification_CasketInv\
    Full\x10\xf7\x07\x124\n/k_EGCItemCustomizationNotification_NameBaseItem\
    \x10\xfb\x07\x126\n1k_EGCItemCustomizationNotification_RemoveItemName\
    \x10\x86\x08\x125\n0k_EGCItemCustomizationNotification_RemoveSticker\x10\
    \x9d\x08\x124\n/k_EGCItemCustomizationNotification_ApplySticker\x10\xbe\
    \x08\x124\n/k_EGCItemCustomizationNotification_StatTrakSwap\x10\xc0\x08\
    \x123\n.k_EGCItemCustomizationNotification_RemovePatch\x10\xc1\x08\x122\
    \n-k_EGCItemCustomizationNotification_ApplyPatch\x10\xc2\x08\x128\n3k_EG\
    CItemCustomizationNotification_ActivateFanToken\x10\xdaG\x12=\n8k_EGCIte\
    mCustomizationNotification_ActivateOperationCoin\x10\xdbG\x126\n1k_EGCIt\
    emCustomizationNotification_GraffitiUnseal\x10\xe1G\x128\n3k_EGCItemCust\
    omizationNotification_GenerateSouvenir\x10\xf4G\x12A\n<k_EGCItemCustomiz\
    ationNotification_ClientRedeemMissionReward\x10\xf9GJ\xe3E\n\x07\x12\x05\
    \0\0\xe1\x01\x01\n\t\n\x02\x03\0\x12\x03\0\0\x1d\n\x0b\n\x02\x05\0\x12\
    \x05\x02\0\x93\x01\x01\n\n\n\x03\x05\0\x01\x12\x03\x02\x05\x0f\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x03\x08\x1c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x03\x08\x14\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\x17\x1b\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03\x04\x08'\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \x04\x08\x1f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\"&\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x03\x05\x08\x1d\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\
    \x05\x08\x15\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\x18\x1c\n\x0b\n\
    \x04\x05\0\x02\x03\x12\x03\x06\x08%\n\x0c\n\x05\x05\0\x02\x03\x01\x12\
    \x03\x06\x08\x1d\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x06\x20$\n\x0b\n\
    \x04\x05\0\x02\x04\x12\x03\x07\x08\x1e\n\x0c\n\x05\x05\0\x02\x04\x01\x12\
    \x03\x07\x08\x16\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x07\x19\x1d\n\x0b\
    \n\x04\x05\0\x02\x05\x12\x03\x08\x08/\n\x0c\n\x05\x05\0\x02\x05\x01\x12\
    \x03\x08\x08'\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x08*.\n\x0b\n\x04\
    \x05\0\x02\x06\x12\x03\t\x08\x20\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\t\
    \x08\x18\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\t\x1b\x1f\n\x0b\n\x04\x05\
    \0\x02\x07\x12\x03\n\x08#\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\n\x08\
    \x1b\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\n\x1e\"\n\x0b\n\x04\x05\0\x02\
    \x08\x12\x03\x0b\x08+\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x0b\x08#\n\
    \x0c\n\x05\x05\0\x02\x08\x02\x12\x03\x0b&*\n\x0b\n\x04\x05\0\x02\t\x12\
    \x03\x0c\x08!\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x0c\x08\x19\n\x0c\n\
    \x05\x05\0\x02\t\x02\x12\x03\x0c\x1c\x20\n\x0b\n\x04\x05\0\x02\n\x12\x03\
    \r\x08)\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\r\x08!\n\x0c\n\x05\x05\0\x02\
    \n\x02\x12\x03\r$(\n\x0b\n\x04\x05\0\x02\x0b\x12\x03\x0e\x08-\n\x0c\n\
    \x05\x05\0\x02\x0b\x01\x12\x03\x0e\x08%\n\x0c\n\x05\x05\0\x02\x0b\x02\
    \x12\x03\x0e(,\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x0f\x08#\n\x0c\n\x05\
    \x05\0\x02\x0c\x01\x12\x03\x0f\x08\x1b\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\
    \x03\x0f\x1e\"\n\x0b\n\x04\x05\0\x02\r\x12\x03\x10\x08+\n\x0c\n\x05\x05\
    \0\x02\r\x01\x12\x03\x10\x08#\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x10&*\
    \n\x0b\n\x04\x05\0\x02\x0e\x12\x03\x11\x082\n\x0c\n\x05\x05\0\x02\x0e\
    \x01\x12\x03\x11\x08*\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\x03\x11-1\n\x0b\
    \n\x04\x05\0\x02\x0f\x12\x03\x12\x08:\n\x0c\n\x05\x05\0\x02\x0f\x01\x12\
    \x03\x12\x082\n\x0c\n\x05\x05\0\x02\x0f\x02\x12\x03\x1259\n\x0b\n\x04\
    \x05\0\x02\x10\x12\x03\x13\x086\n\x0c\n\x05\x05\0\x02\x10\x01\x12\x03\
    \x13\x08.\n\x0c\n\x05\x05\0\x02\x10\x02\x12\x03\x1315\n\x0b\n\x04\x05\0\
    \x02\x11\x12\x03\x14\x082\n\x0c\n\x05\x05\0\x02\x11\x01\x12\x03\x14\x08*\
    \n\x0c\n\x05\x05\0\x02\x11\x02\x12\x03\x14-1\n\x0b\n\x04\x05\0\x02\x12\
    \x12\x03\x15\x08:\n\x0c\n\x05\x05\0\x02\x12\x01\x12\x03\x15\x082\n\x0c\n\
    \x05\x05\0\x02\x12\x02\x12\x03\x1559\n\x0b\n\x04\x05\0\x02\x13\x12\x03\
    \x16\x08$\n\x0c\n\x05\x05\0\x02\x13\x01\x12\x03\x16\x08\x1c\n\x0c\n\x05\
    \x05\0\x02\x13\x02\x12\x03\x16\x1f#\n\x0b\n\x04\x05\0\x02\x14\x12\x03\
    \x17\x08,\n\x0c\n\x05\x05\0\x02\x14\x01\x12\x03\x17\x08$\n\x0c\n\x05\x05\
    \0\x02\x14\x02\x12\x03\x17'+\n\x0b\n\x04\x05\0\x02\x15\x12\x03\x18\x083\
    \n\x0c\n\x05\x05\0\x02\x15\x01\x12\x03\x18\x08+\n\x0c\n\x05\x05\0\x02\
    \x15\x02\x12\x03\x18.2\n\x0b\n\x04\x05\0\x02\x16\x12\x03\x19\x08;\n\x0c\
    \n\x05\x05\0\x02\x16\x01\x12\x03\x19\x083\n\x0c\n\x05\x05\0\x02\x16\x02\
    \x12\x03\x196:\n\x0b\n\x04\x05\0\x02\x17\x12\x03\x1a\x08,\n\x0c\n\x05\
    \x05\0\x02\x17\x01\x12\x03\x1a\x08$\n\x0c\n\x05\x05\0\x02\x17\x02\x12\
    \x03\x1a'+\n\x0b\n\x04\x05\0\x02\x18\x12\x03\x1b\x084\n\x0c\n\x05\x05\0\
    \x02\x18\x01\x12\x03\x1b\x08,\n\x0c\n\x05\x05\0\x02\x18\x02\x12\x03\x1b/\
    3\n\x0b\n\x04\x05\0\x02\x19\x12\x03\x1c\x08&\n\x0c\n\x05\x05\0\x02\x19\
    \x01\x12\x03\x1c\x08\x1e\n\x0c\n\x05\x05\0\x02\x19\x02\x12\x03\x1c!%\n\
    \x0b\n\x04\x05\0\x02\x1a\x12\x03\x1d\x08'\n\x0c\n\x05\x05\0\x02\x1a\x01\
    \x12\x03\x1d\x08\x1f\n\x0c\n\x05\x05\0\x02\x1a\x02\x12\x03\x1d\"&\n\x0b\
    \n\x04\x05\0\x02\x1b\x12\x03\x1e\x08.\n\x0c\n\x05\x05\0\x02\x1b\x01\x12\
    \x03\x1e\x08&\n\x0c\n\x05\x05\0\x02\x1b\x02\x12\x03\x1e)-\n\x0b\n\x04\
    \x05\0\x02\x1c\x12\x03\x1f\x08&\n\x0c\n\x05\x05\0\x02\x1c\x01\x12\x03\
    \x1f\x08\x1e\n\x0c\n\x05\x05\0\x02\x1c\x02\x12\x03\x1f!%\n\x0b\n\x04\x05\
    \0\x02\x1d\x12\x03\x20\x08'\n\x0c\n\x05\x05\0\x02\x1d\x01\x12\x03\x20\
    \x08\x1f\n\x0c\n\x05\x05\0\x02\x1d\x02\x12\x03\x20\"&\n\x0b\n\x04\x05\0\
    \x02\x1e\x12\x03!\x08$\n\x0c\n\x05\x05\0\x02\x1e\x01\x12\x03!\x08\x1c\n\
    \x0c\n\x05\x05\0\x02\x1e\x02\x12\x03!\x1f#\n\x0b\n\x04\x05\0\x02\x1f\x12\
    \x03\"\x08,\n\x0c\n\x05\x05\0\x02\x1f\x01\x12\x03\"\x08$\n\x0c\n\x05\x05\
    \0\x02\x1f\x02\x12\x03\"'+\n\x0b\n\x04\x05\0\x02\x20\x12\x03#\x08#\n\x0c\
    \n\x05\x05\0\x02\x20\x01\x12\x03#\x08\x1b\n\x0c\n\x05\x05\0\x02\x20\x02\
    \x12\x03#\x1e\"\n\x0b\n\x04\x05\0\x02!\x12\x03$\x080\n\x0c\n\x05\x05\0\
    \x02!\x01\x12\x03$\x08(\n\x0c\n\x05\x05\0\x02!\x02\x12\x03$+/\n\x0b\n\
    \x04\x05\0\x02\"\x12\x03%\x083\n\x0c\n\x05\x05\0\x02\"\x01\x12\x03%\x08+\
    \n\x0c\n\x05\x05\0\x02\"\x02\x12\x03%.2\n\x0b\n\x04\x05\0\x02#\x12\x03&\
    \x08)\n\x0c\n\x05\x05\0\x02#\x01\x12\x03&\x08!\n\x0c\n\x05\x05\0\x02#\
    \x02\x12\x03&$(\n\x0b\n\x04\x05\0\x02$\x12\x03'\x08*\n\x0c\n\x05\x05\0\
    \x02$\x01\x12\x03'\x08\"\n\x0c\n\x05\x05\0\x02$\x02\x12\x03'%)\n\x0b\n\
    \x04\x05\0\x02%\x12\x03(\x08$\n\x0c\n\x05\x05\0\x02%\x01\x12\x03(\x08\
    \x1c\n\x0c\n\x05\x05\0\x02%\x02\x12\x03(\x1f#\n\x0b\n\x04\x05\0\x02&\x12\
    \x03)\x08)\n\x0c\n\x05\x05\0\x02&\x01\x12\x03)\x08!\n\x0c\n\x05\x05\0\
    \x02&\x02\x12\x03)$(\n\x0b\n\x04\x05\0\x02'\x12\x03*\x08!\n\x0c\n\x05\
    \x05\0\x02'\x01\x12\x03*\x08\x19\n\x0c\n\x05\x05\0\x02'\x02\x12\x03*\x1c\
    \x20\n\x0b\n\x04\x05\0\x02(\x12\x03+\x085\n\x0c\n\x05\x05\0\x02(\x01\x12\
    \x03+\x08-\n\x0c\n\x05\x05\0\x02(\x02\x12\x03+04\n\x0b\n\x04\x05\0\x02)\
    \x12\x03,\x08%\n\x0c\n\x05\x05\0\x02)\x01\x12\x03,\x08\x1d\n\x0c\n\x05\
    \x05\0\x02)\x02\x12\x03,\x20$\n\x0b\n\x04\x05\0\x02*\x12\x03-\x08-\n\x0c\
    \n\x05\x05\0\x02*\x01\x12\x03-\x08%\n\x0c\n\x05\x05\0\x02*\x02\x12\x03-(\
    ,\n\x0b\n\x04\x05\0\x02+\x12\x03.\x08)\n\x0c\n\x05\x05\0\x02+\x01\x12\
    \x03.\x08!\n\x0c\n\x05\x05\0\x02+\x02\x12\x03.$(\n\x0b\n\x04\x05\0\x02,\
    \x12\x03/\x081\n\x0c\n\x05\x05\0\x02,\x01\x12\x03/\x08)\n\x0c\n\x05\x05\
    \0\x02,\x02\x12\x03/,0\n\x0b\n\x04\x05\0\x02-\x12\x030\x08(\n\x0c\n\x05\
    \x05\0\x02-\x01\x12\x030\x08\x20\n\x0c\n\x05\x05\0\x02-\x02\x12\x030#'\n\
    \x0b\n\x04\x05\0\x02.\x12\x031\x08+\n\x0c\n\x05\x05\0\x02.\x01\x12\x031\
    \x08#\n\x0c\n\x05\x05\0\x02.\x02\x12\x031&*\n\x0b\n\x04\x05\0\x02/\x12\
    \x032\x083\n\x0c\n\x05\x05\0\x02/\x01\x12\x032\x08+\n\x0c\n\x05\x05\0\
    \x02/\x02\x12\x032.2\n\x0b\n\x04\x05\0\x020\x12\x033\x08(\n\x0c\n\x05\
    \x05\0\x020\x01\x12\x033\x08\x20\n\x0c\n\x05\x05\0\x020\x02\x12\x033#'\n\
    \x0b\n\x04\x05\0\x021\x12\x034\x080\n\x0c\n\x05\x05\0\x021\x01\x12\x034\
    \x08(\n\x0c\n\x05\x05\0\x021\x02\x12\x034+/\n\x0b\n\x04\x05\0\x022\x12\
    \x035\x08.\n\x0c\n\x05\x05\0\x022\x01\x12\x035\x08&\n\x0c\n\x05\x05\0\
    \x022\x02\x12\x035)-\n\x0b\n\x04\x05\0\x023\x12\x036\x086\n\x0c\n\x05\
    \x05\0\x023\x01\x12\x036\x08.\n\x0c\n\x05\x05\0\x023\x02\x12\x03615\n\
    \x0b\n\x04\x05\0\x024\x12\x037\x08&\n\x0c\n\x05\x05\0\x024\x01\x12\x037\
    \x08\x1e\n\x0c\n\x05\x05\0\x024\x02\x12\x037!%\n\x0b\n\x04\x05\0\x025\
    \x12\x038\x08,\n\x0c\n\x05\x05\0\x025\x01\x12\x038\x08$\n\x0c\n\x05\x05\
    \0\x025\x02\x12\x038'+\n\x0b\n\x04\x05\0\x026\x12\x039\x08/\n\x0c\n\x05\
    \x05\0\x026\x01\x12\x039\x08'\n\x0c\n\x05\x05\0\x026\x02\x12\x039*.\n\
    \x0b\n\x04\x05\0\x027\x12\x03:\x08#\n\x0c\n\x05\x05\0\x027\x01\x12\x03:\
    \x08\x1b\n\x0c\n\x05\x05\0\x027\x02\x12\x03:\x1e\"\n\x0b\n\x04\x05\0\x02\
    8\x12\x03;\x084\n\x0c\n\x05\x05\0\x028\x01\x12\x03;\x08,\n\x0c\n\x05\x05\
    \0\x028\x02\x12\x03;/3\n\x0b\n\x04\x05\0\x029\x12\x03<\x08$\n\x0c\n\x05\
    \x05\0\x029\x01\x12\x03<\x08\x1c\n\x0c\n\x05\x05\0\x029\x02\x12\x03<\x1f\
    #\n\x0b\n\x04\x05\0\x02:\x12\x03=\x08,\n\x0c\n\x05\x05\0\x02:\x01\x12\
    \x03=\x08$\n\x0c\n\x05\x05\0\x02:\x02\x12\x03='+\n\x0b\n\x04\x05\0\x02;\
    \x12\x03>\x08,\n\x0c\n\x05\x05\0\x02;\x01\x12\x03>\x08$\n\x0c\n\x05\x05\
    \0\x02;\x02\x12\x03>'+\n\x0b\n\x04\x05\0\x02<\x12\x03?\x08.\n\x0c\n\x05\
    \x05\0\x02<\x01\x12\x03?\x08&\n\x0c\n\x05\x05\0\x02<\x02\x12\x03?)-\n\
    \x0b\n\x04\x05\0\x02=\x12\x03@\x08+\n\x0c\n\x05\x05\0\x02=\x01\x12\x03@\
    \x08#\n\x0c\n\x05\x05\0\x02=\x02\x12\x03@&*\n\x0b\n\x04\x05\0\x02>\x12\
    \x03A\x08)\n\x0c\n\x05\x05\0\x02>\x01\x12\x03A\x08!\n\x0c\n\x05\x05\0\
    \x02>\x02\x12\x03A$(\n\x0b\n\x04\x05\0\x02?\x12\x03B\x081\n\x0c\n\x05\
    \x05\0\x02?\x01\x12\x03B\x08)\n\x0c\n\x05\x05\0\x02?\x02\x12\x03B,0\n\
    \x0b\n\x04\x05\0\x02@\x12\x03C\x08(\n\x0c\n\x05\x05\0\x02@\x01\x12\x03C\
    \x08\x20\n\x0c\n\x05\x05\0\x02@\x02\x12\x03C#'\n\x0b\n\x04\x05\0\x02A\
    \x12\x03D\x084\n\x0c\n\x05\x05\0\x02A\x01\x12\x03D\x08,\n\x0c\n\x05\x05\
    \0\x02A\x02\x12\x03D/3\n\x0b\n\x04\x05\0\x02B\x12\x03E\x083\n\x0c\n\x05\
    \x05\0\x02B\x01\x12\x03E\x08+\n\x0c\n\x05\x05\0\x02B\x02\x12\x03E.2\n\
    \x0b\n\x04\x05\0\x02C\x12\x03F\x08+\n\x0c\n\x05\x05\0\x02C\x01\x12\x03F\
    \x08#\n\x0c\n\x05\x05\0\x02C\x02\x12\x03F&*\n\x0b\n\x04\x05\0\x02D\x12\
    \x03G\x08(\n\x0c\n\x05\x05\0\x02D\x01\x12\x03G\x08\x20\n\x0c\n\x05\x05\0\
    \x02D\x02\x12\x03G#'\n\x0b\n\x04\x05\0\x02E\x12\x03H\x08'\n\x0c\n\x05\
    \x05\0\x02E\x01\x12\x03H\x08\x1f\n\x0c\n\x05\x05\0\x02E\x02\x12\x03H\"&\
    \n\x0b\n\x04\x05\0\x02F\x12\x03I\x08.\n\x0c\n\x05\x05\0\x02F\x01\x12\x03\
    I\x08&\n\x0c\n\x05\x05\0\x02F\x02\x12\x03I)-\n\x0b\n\x04\x05\0\x02G\x12\
    \x03J\x08$\n\x0c\n\x05\x05\0\x02G\x01\x12\x03J\x08\x1c\n\x0c\n\x05\x05\0\
    \x02G\x02\x12\x03J\x1f#\n\x0b\n\x04\x05\0\x02H\x12\x03K\x08(\n\x0c\n\x05\
    \x05\0\x02H\x01\x12\x03K\x08\x20\n\x0c\n\x05\x05\0\x02H\x02\x12\x03K#'\n\
    \x0b\n\x04\x05\0\x02I\x12\x03L\x08,\n\x0c\n\x05\x05\0\x02I\x01\x12\x03L\
    \x08$\n\x0c\n\x05\x05\0\x02I\x02\x12\x03L'+\n\x0b\n\x04\x05\0\x02J\x12\
    \x03M\x08#\n\x0c\n\x05\x05\0\x02J\x01\x12\x03M\x08\x1b\n\x0c\n\x05\x05\0\
    \x02J\x02\x12\x03M\x1e\"\n\x0b\n\x04\x05\0\x02K\x12\x03N\x08'\n\x0c\n\
    \x05\x05\0\x02K\x01\x12\x03N\x08\x1f\n\x0c\n\x05\x05\0\x02K\x02\x12\x03N\
    \"&\n\x0b\n\x04\x05\0\x02L\x12\x03O\x08/\n\x0c\n\x05\x05\0\x02L\x01\x12\
    \x03O\x08'\n\x0c\n\x05\x05\0\x02L\x02\x12\x03O*.\n\x0b\n\x04\x05\0\x02M\
    \x12\x03P\x08$\n\x0c\n\x05\x05\0\x02M\x01\x12\x03P\x08\x1c\n\x0c\n\x05\
    \x05\0\x02M\x02\x12\x03P\x1f#\n\x0b\n\x04\x05\0\x02N\x12\x03Q\x08(\n\x0c\
    \n\x05\x05\0\x02N\x01\x12\x03Q\x08\x20\n\x0c\n\x05\x05\0\x02N\x02\x12\
    \x03Q#'\n\x0b\n\x04\x05\0\x02O\x12\x03R\x08$\n\x0c\n\x05\x05\0\x02O\x01\
    \x12\x03R\x08\x1c\n\x0c\n\x05\x05\0\x02O\x02\x12\x03R\x1f#\n\x0b\n\x04\
    \x05\0\x02P\x12\x03S\x088\n\x0c\n\x05\x05\0\x02P\x01\x12\x03S\x080\n\x0c\
    \n\x05\x05\0\x02P\x02\x12\x03S37\n\x0b\n\x04\x05\0\x02Q\x12\x03T\x085\n\
    \x0c\n\x05\x05\0\x02Q\x01\x12\x03T\x08-\n\x0c\n\x05\x05\0\x02Q\x02\x12\
    \x03T04\n\x0b\n\x04\x05\0\x02R\x12\x03U\x08+\n\x0c\n\x05\x05\0\x02R\x01\
    \x12\x03U\x08#\n\x0c\n\x05\x05\0\x02R\x02\x12\x03U&*\n\x0b\n\x04\x05\0\
    \x02S\x12\x03V\x08%\n\x0c\n\x05\x05\0\x02S\x01\x12\x03V\x08\x1d\n\x0c\n\
    \x05\x05\0\x02S\x02\x12\x03V\x20$\n\x0b\n\x04\x05\0\x02T\x12\x03W\x08)\n\
    \x0c\n\x05\x05\0\x02T\x01\x12\x03W\x08!\n\x0c\n\x05\x05\0\x02T\x02\x12\
    \x03W$(\n\x0b\n\x04\x05\0\x02U\x12\x03X\x08.\n\x0c\n\x05\x05\0\x02U\x01\
    \x12\x03X\x08&\n\x0c\n\x05\x05\0\x02U\x02\x12\x03X)-\n\x0b\n\x04\x05\0\
    \x02V\x12\x03Y\x08#\n\x0c\n\x05\x05\0\x02V\x01\x12\x03Y\x08\x1b\n\x0c\n\
    \x05\x05\0\x02V\x02\x12\x03Y\x1e\"\n\x0b\n\x04\x05\0\x02W\x12\x03Z\x084\
    \n\x0c\n\x05\x05\0\x02W\x01\x12\x03Z\x08,\n\x0c\n\x05\x05\0\x02W\x02\x12\
    \x03Z/3\n\x0b\n\x04\x05\0\x02X\x12\x03[\x085\n\x0c\n\x05\x05\0\x02X\x01\
    \x12\x03[\x08-\n\x0c\n\x05\x05\0\x02X\x02\x12\x03[04\n\x0b\n\x04\x05\0\
    \x02Y\x12\x03\\\x08,\n\x0c\n\x05\x05\0\x02Y\x01\x12\x03\\\x08$\n\x0c\n\
    \x05\x05\0\x02Y\x02\x12\x03\\'+\n\x0b\n\x04\x05\0\x02Z\x12\x03]\x08'\n\
    \x0c\n\x05\x05\0\x02Z\x01\x12\x03]\x08\x1f\n\x0c\n\x05\x05\0\x02Z\x02\
    \x12\x03]\"&\n\x0b\n\x04\x05\0\x02[\x12\x03^\x08*\n\x0c\n\x05\x05\0\x02[\
    \x01\x12\x03^\x08\"\n\x0c\n\x05\x05\0\x02[\x02\x12\x03^%)\n\x0b\n\x04\
    \x05\0\x02\\\x12\x03_\x08/\n\x0c\n\x05\x05\0\x02\\\x01\x12\x03_\x08'\n\
    \x0c\n\x05\x05\0\x02\\\x02\x12\x03_*.\n\x0b\n\x04\x05\0\x02]\x12\x03`\
    \x08,\n\x0c\n\x05\x05\0\x02]\x01\x12\x03`\x08$\n\x0c\n\x05\x05\0\x02]\
    \x02\x12\x03`'+\n\x0b\n\x04\x05\0\x02^\x12\x03a\x081\n\x0c\n\x05\x05\0\
    \x02^\x01\x12\x03a\x08)\n\x0c\n\x05\x05\0\x02^\x02\x12\x03a,0\n\x0b\n\
    \x04\x05\0\x02_\x12\x03b\x08-\n\x0c\n\x05\x05\0\x02_\x01\x12\x03b\x08%\n\
    \x0c\n\x05\x05\0\x02_\x02\x12\x03b(,\n\x0b\n\x04\x05\0\x02`\x12\x03c\x08\
    -\n\x0c\n\x05\x05\0\x02`\x01\x12\x03c\x08%\n\x0c\n\x05\x05\0\x02`\x02\
    \x12\x03c(,\n\x0b\n\x04\x05\0\x02a\x12\x03d\x08,\n\x0c\n\x05\x05\0\x02a\
    \x01\x12\x03d\x08$\n\x0c\n\x05\x05\0\x02a\x02\x12\x03d'+\n\x0b\n\x04\x05\
    \0\x02b\x12\x03e\x08,\n\x0c\n\x05\x05\0\x02b\x01\x12\x03e\x08$\n\x0c\n\
    \x05\x05\0\x02b\x02\x12\x03e'+\n\x0b\n\x04\x05\0\x02c\x12\x03f\x082\n\
    \x0c\n\x05\x05\0\x02c\x01\x12\x03f\x08*\n\x0c\n\x05\x05\0\x02c\x02\x12\
    \x03f-1\n\x0b\n\x04\x05\0\x02d\x12\x03g\x084\n\x0c\n\x05\x05\0\x02d\x01\
    \x12\x03g\x08,\n\x0c\n\x05\x05\0\x02d\x02\x12\x03g/3\n\x0b\n\x04\x05\0\
    \x02e\x12\x03h\x085\n\x0c\n\x05\x05\0\x02e\x01\x12\x03h\x08-\n\x0c\n\x05\
    \x05\0\x02e\x02\x12\x03h04\n\x0b\n\x04\x05\0\x02f\x12\x03i\x08)\n\x0c\n\
    \x05\x05\0\x02f\x01\x12\x03i\x08!\n\x0c\n\x05\x05\0\x02f\x02\x12\x03i$(\
    \n\x0b\n\x04\x05\0\x02g\x12\x03j\x08.\n\x0c\n\x05\x05\0\x02g\x01\x12\x03\
    j\x08&\n\x0c\n\x05\x05\0\x02g\x02\x12\x03j)-\n\x0b\n\x04\x05\0\x02h\x12\
    \x03k\x081\n\x0c\n\x05\x05\0\x02h\x01\x12\x03k\x08)\n\x0c\n\x05\x05\0\
    \x02h\x02\x12\x03k,0\n\x0b\n\x04\x05\0\x02i\x12\x03l\x08*\n\x0c\n\x05\
    \x05\0\x02i\x01\x12\x03l\x08\"\n\x0c\n\x05\x05\0\x02i\x02\x12\x03l%)\n\
    \x0b\n\x04\x05\0\x02j\x12\x03m\x082\n\x0c\n\x05\x05\0\x02j\x01\x12\x03m\
    \x08*\n\x0c\n\x05\x05\0\x02j\x02\x12\x03m-1\n\x0b\n\x04\x05\0\x02k\x12\
    \x03n\x08)\n\x0c\n\x05\x05\0\x02k\x01\x12\x03n\x08!\n\x0c\n\x05\x05\0\
    \x02k\x02\x12\x03n$(\n\x0b\n\x04\x05\0\x02l\x12\x03o\x085\n\x0c\n\x05\
    \x05\0\x02l\x01\x12\x03o\x08-\n\x0c\n\x05\x05\0\x02l\x02\x12\x03o04\n\
    \x0b\n\x04\x05\0\x02m\x12\x03p\x089\n\x0c\n\x05\x05\0\x02m\x01\x12\x03p\
    \x081\n\x0c\n\x05\x05\0\x02m\x02\x12\x03p48\n\x0b\n\x04\x05\0\x02n\x12\
    \x03q\x08*\n\x0c\n\x05\x05\0\x02n\x01\x12\x03q\x08\"\n\x0c\n\x05\x05\0\
    \x02n\x02\x12\x03q%)\n\x0b\n\x04\x05\0\x02o\x12\x03r\x082\n\x0c\n\x05\
    \x05\0\x02o\x01\x12\x03r\x08*\n\x0c\n\x05\x05\0\x02o\x02\x12\x03r-1\n\
    \x0b\n\x04\x05\0\x02p\x12\x03s\x08,\n\x0c\n\x05\x05\0\x02p\x01\x12\x03s\
    \x08$\n\x0c\n\x05\x05\0\x02p\x02\x12\x03s'+\n\x0b\n\x04\x05\0\x02q\x12\
    \x03t\x08(\n\x0c\n\x05\x05\0\x02q\x01\x12\x03t\x08\x20\n\x0c\n\x05\x05\0\
    \x02q\x02\x12\x03t#'\n\x0b\n\x04\x05\0\x02r\x12\x03u\x080\n\x0c\n\x05\
    \x05\0\x02r\x01\x12\x03u\x08(\n\x0c\n\x05\x05\0\x02r\x02\x12\x03u+/\n\
    \x0b\n\x04\x05\0\x02s\x12\x03v\x084\n\x0c\n\x05\x05\0\x02s\x01\x12\x03v\
    \x08,\n\x0c\n\x05\x05\0\x02s\x02\x12\x03v/3\n\x0b\n\x04\x05\0\x02t\x12\
    \x03w\x08<\n\x0c\n\x05\x05\0\x02t\x01\x12\x03w\x084\n\x0c\n\x05\x05\0\
    \x02t\x02\x12\x03w7;\n\x0b\n\x04\x05\0\x02u\x12\x03x\x08-\n\x0c\n\x05\
    \x05\0\x02u\x01\x12\x03x\x08%\n\x0c\n\x05\x05\0\x02u\x02\x12\x03x(,\n\
    \x0b\n\x04\x05\0\x02v\x12\x03y\x085\n\x0c\n\x05\x05\0\x02v\x01\x12\x03y\
    \x08-\n\x0c\n\x05\x05\0\x02v\x02\x12\x03y04\n\x0b\n\x04\x05\0\x02w\x12\
    \x03z\x08+\n\x0c\n\x05\x05\0\x02w\x01\x12\x03z\x08#\n\x0c\n\x05\x05\0\
    \x02w\x02\x12\x03z&*\n\x0b\n\x04\x05\0\x02x\x12\x03{\x083\n\x0c\n\x05\
    \x05\0\x02x\x01\x12\x03{\x08+\n\x0c\n\x05\x05\0\x02x\x02\x12\x03{.2\n\
    \x0b\n\x04\x05\0\x02y\x12\x03|\x08-\n\x0c\n\x05\x05\0\x02y\x01\x12\x03|\
    \x08%\n\x0c\n\x05\x05\0\x02y\x02\x12\x03|(,\n\x0b\n\x04\x05\0\x02z\x12\
    \x03}\x085\n\x0c\n\x05\x05\0\x02z\x01\x12\x03}\x08-\n\x0c\n\x05\x05\0\
    \x02z\x02\x12\x03}04\n\x0b\n\x04\x05\0\x02{\x12\x03~\x08)\n\x0c\n\x05\
    \x05\0\x02{\x01\x12\x03~\x08!\n\x0c\n\x05\x05\0\x02{\x02\x12\x03~$(\n\
    \x0b\n\x04\x05\0\x02|\x12\x03\x7f\x081\n\x0c\n\x05\x05\0\x02|\x01\x12\
    \x03\x7f\x08)\n\x0c\n\x05\x05\0\x02|\x02\x12\x03\x7f,0\n\x0c\n\x04\x05\0\
    \x02}\x12\x04\x80\x01\x08-\n\r\n\x05\x05\0\x02}\x01\x12\x04\x80\x01\x08%\
    \n\r\n\x05\x05\0\x02}\x02\x12\x04\x80\x01(,\n\x0c\n\x04\x05\0\x02~\x12\
    \x04\x81\x01\x08.\n\r\n\x05\x05\0\x02~\x01\x12\x04\x81\x01\x08&\n\r\n\
    \x05\x05\0\x02~\x02\x12\x04\x81\x01)-\n\x0c\n\x04\x05\0\x02\x7f\x12\x04\
    \x82\x01\x083\n\r\n\x05\x05\0\x02\x7f\x01\x12\x04\x82\x01\x08+\n\r\n\x05\
    \x05\0\x02\x7f\x02\x12\x04\x82\x01.2\n\r\n\x05\x05\0\x02\x80\x01\x12\x04\
    \x83\x01\x081\n\x0e\n\x06\x05\0\x02\x80\x01\x01\x12\x04\x83\x01\x08)\n\
    \x0e\n\x06\x05\0\x02\x80\x01\x02\x12\x04\x83\x01,0\n\r\n\x05\x05\0\x02\
    \x81\x01\x12\x04\x84\x01\x08)\n\x0e\n\x06\x05\0\x02\x81\x01\x01\x12\x04\
    \x84\x01\x08!\n\x0e\n\x06\x05\0\x02\x81\x01\x02\x12\x04\x84\x01$(\n\r\n\
    \x05\x05\0\x02\x82\x01\x12\x04\x85\x01\x081\n\x0e\n\x06\x05\0\x02\x82\
    \x01\x01\x12\x04\x85\x01\x08)\n\x0e\n\x06\x05\0\x02\x82\x01\x02\x12\x04\
    \x85\x01,0\n\r\n\x05\x05\0\x02\x83\x01\x12\x04\x86\x01\x08-\n\x0e\n\x06\
    \x05\0\x02\x83\x01\x01\x12\x04\x86\x01\x08%\n\x0e\n\x06\x05\0\x02\x83\
    \x01\x02\x12\x04\x86\x01(,\n\r\n\x05\x05\0\x02\x84\x01\x12\x04\x87\x01\
    \x08+\n\x0e\n\x06\x05\0\x02\x84\x01\x01\x12\x04\x87\x01\x08#\n\x0e\n\x06\
    \x05\0\x02\x84\x01\x02\x12\x04\x87\x01&*\n\r\n\x05\x05\0\x02\x85\x01\x12\
    \x04\x88\x01\x083\n\x0e\n\x06\x05\0\x02\x85\x01\x01\x12\x04\x88\x01\x08+\
    \n\x0e\n\x06\x05\0\x02\x85\x01\x02\x12\x04\x88\x01.2\n\r\n\x05\x05\0\x02\
    \x86\x01\x12\x04\x89\x01\x083\n\x0e\n\x06\x05\0\x02\x86\x01\x01\x12\x04\
    \x89\x01\x08+\n\x0e\n\x06\x05\0\x02\x86\x01\x02\x12\x04\x89\x01.2\n\r\n\
    \x05\x05\0\x02\x87\x01\x12\x04\x8a\x01\x08,\n\x0e\n\x06\x05\0\x02\x87\
    \x01\x01\x12\x04\x8a\x01\x08$\n\x0e\n\x06\x05\0\x02\x87\x01\x02\x12\x04\
    \x8a\x01'+\n\r\n\x05\x05\0\x02\x88\x01\x12\x04\x8b\x01\x080\n\x0e\n\x06\
    \x05\0\x02\x88\x01\x01\x12\x04\x8b\x01\x08(\n\x0e\n\x06\x05\0\x02\x88\
    \x01\x02\x12\x04\x8b\x01+/\n\r\n\x05\x05\0\x02\x89\x01\x12\x04\x8c\x01\
    \x08,\n\x0e\n\x06\x05\0\x02\x89\x01\x01\x12\x04\x8c\x01\x08$\n\x0e\n\x06\
    \x05\0\x02\x89\x01\x02\x12\x04\x8c\x01'+\n\r\n\x05\x05\0\x02\x8a\x01\x12\
    \x04\x8d\x01\x084\n\x0e\n\x06\x05\0\x02\x8a\x01\x01\x12\x04\x8d\x01\x08,\
    \n\x0e\n\x06\x05\0\x02\x8a\x01\x02\x12\x04\x8d\x01/3\n\r\n\x05\x05\0\x02\
    \x8b\x01\x12\x04\x8e\x01\x080\n\x0e\n\x06\x05\0\x02\x8b\x01\x01\x12\x04\
    \x8e\x01\x08(\n\x0e\n\x06\x05\0\x02\x8b\x01\x02\x12\x04\x8e\x01+/\n\r\n\
    \x05\x05\0\x02\x8c\x01\x12\x04\x8f\x01\x08,\n\x0e\n\x06\x05\0\x02\x8c\
    \x01\x01\x12\x04\x8f\x01\x08$\n\x0e\n\x06\x05\0\x02\x8c\x01\x02\x12\x04\
    \x8f\x01'+\n\r\n\x05\x05\0\x02\x8d\x01\x12\x04\x90\x01\x084\n\x0e\n\x06\
    \x05\0\x02\x8d\x01\x01\x12\x04\x90\x01\x08,\n\x0e\n\x06\x05\0\x02\x8d\
    \x01\x02\x12\x04\x90\x01/3\n\r\n\x05\x05\0\x02\x8e\x01\x12\x04\x91\x01\
    \x083\n\x0e\n\x06\x05\0\x02\x8e\x01\x01\x12\x04\x91\x01\x08+\n\x0e\n\x06\
    \x05\0\x02\x8e\x01\x02\x12\x04\x91\x01.2\n\r\n\x05\x05\0\x02\x8f\x01\x12\
    \x04\x92\x01\x08(\n\x0e\n\x06\x05\0\x02\x8f\x01\x01\x12\x04\x92\x01\x08\
    \x20\n\x0e\n\x06\x05\0\x02\x8f\x01\x02\x12\x04\x92\x01#'\n\x0c\n\x02\x05\
    \x01\x12\x06\x95\x01\0\xa1\x01\x01\n\x0b\n\x03\x05\x01\x01\x12\x04\x95\
    \x01\x05\x13\n\x0c\n\x04\x05\x01\x02\0\x12\x04\x96\x01\x08\x1f\n\r\n\x05\
    \x05\x01\x02\0\x01\x12\x04\x96\x01\x08\x1a\n\r\n\x05\x05\x01\x02\0\x02\
    \x12\x04\x96\x01\x1d\x1e\n\x0c\n\x04\x05\x01\x02\x01\x12\x04\x97\x01\x08\
    #\n\r\n\x05\x05\x01\x02\x01\x01\x12\x04\x97\x01\x08\x1e\n\r\n\x05\x05\
    \x01\x02\x01\x02\x12\x04\x97\x01!\"\n\x0c\n\x04\x05\x01\x02\x02\x12\x04\
    \x98\x01\x08(\n\r\n\x05\x05\x01\x02\x02\x01\x12\x04\x98\x01\x08#\n\r\n\
    \x05\x05\x01\x02\x02\x02\x12\x04\x98\x01&'\n\x0c\n\x04\x05\x01\x02\x03\
    \x12\x04\x99\x01\x08$\n\r\n\x05\x05\x01\x02\x03\x01\x12\x04\x99\x01\x08\
    \x1f\n\r\n\x05\x05\x01\x02\x03\x02\x12\x04\x99\x01\"#\n\x0c\n\x04\x05\
    \x01\x02\x04\x12\x04\x9a\x01\x08$\n\r\n\x05\x05\x01\x02\x04\x01\x12\x04\
    \x9a\x01\x08\x1f\n\r\n\x05\x05\x01\x02\x04\x02\x12\x04\x9a\x01\"#\n\x0c\
    \n\x04\x05\x01\x02\x05\x12\x04\x9b\x01\x08$\n\r\n\x05\x05\x01\x02\x05\
    \x01\x12\x04\x9b\x01\x08\x1f\n\r\n\x05\x05\x01\x02\x05\x02\x12\x04\x9b\
    \x01\"#\n\x0c\n\x04\x05\x01\x02\x06\x12\x04\x9c\x01\x08)\n\r\n\x05\x05\
    \x01\x02\x06\x01\x12\x04\x9c\x01\x08$\n\r\n\x05\x05\x01\x02\x06\x02\x12\
    \x04\x9c\x01'(\n\x0c\n\x04\x05\x01\x02\x07\x12\x04\x9d\x01\x08(\n\r\n\
    \x05\x05\x01\x02\x07\x01\x12\x04\x9d\x01\x08#\n\r\n\x05\x05\x01\x02\x07\
    \x02\x12\x04\x9d\x01&'\n\x0c\n\x04\x05\x01\x02\x08\x12\x04\x9e\x01\x08#\
    \n\r\n\x05\x05\x01\x02\x08\x01\x12\x04\x9e\x01\x08\x1e\n\r\n\x05\x05\x01\
    \x02\x08\x02\x12\x04\x9e\x01!\"\n\x0c\n\x04\x05\x01\x02\t\x12\x04\x9f\
    \x01\x08\"\n\r\n\x05\x05\x01\x02\t\x01\x12\x04\x9f\x01\x08\x1d\n\r\n\x05\
    \x05\x01\x02\t\x02\x12\x04\x9f\x01\x20!\n\x0c\n\x04\x05\x01\x02\n\x12\
    \x04\xa0\x01\x08'\n\r\n\x05\x05\x01\x02\n\x01\x12\x04\xa0\x01\x08!\n\r\n\
    \x05\x05\x01\x02\n\x02\x12\x04\xa0\x01$&\n\x0c\n\x02\x05\x02\x12\x06\xa3\
    \x01\0\xaa\x01\x01\n\x0b\n\x03\x05\x02\x01\x12\x04\xa3\x01\x05\x11\n\x0c\
    \n\x04\x05\x02\x02\0\x12\x04\xa4\x01\x08$\n\r\n\x05\x05\x02\x02\0\x01\
    \x12\x04\xa4\x01\x08\x1f\n\r\n\x05\x05\x02\x02\0\x02\x12\x04\xa4\x01\"#\
    \n\x0c\n\x04\x05\x02\x02\x01\x12\x04\xa5\x01\x08(\n\r\n\x05\x05\x02\x02\
    \x01\x01\x12\x04\xa5\x01\x08#\n\r\n\x05\x05\x02\x02\x01\x02\x12\x04\xa5\
    \x01&'\n\x0c\n\x04\x05\x02\x02\x02\x12\x04\xa6\x01\x08,\n\r\n\x05\x05\
    \x02\x02\x02\x01\x12\x04\xa6\x01\x08'\n\r\n\x05\x05\x02\x02\x02\x02\x12\
    \x04\xa6\x01*+\n\x0c\n\x04\x05\x02\x02\x03\x12\x04\xa7\x01\x08,\n\r\n\
    \x05\x05\x02\x02\x03\x01\x12\x04\xa7\x01\x08'\n\r\n\x05\x05\x02\x02\x03\
    \x02\x12\x04\xa7\x01*+\n\x0c\n\x04\x05\x02\x02\x04\x12\x04\xa8\x01\x08/\
    \n\r\n\x05\x05\x02\x02\x04\x01\x12\x04\xa8\x01\x08*\n\r\n\x05\x05\x02\
    \x02\x04\x02\x12\x04\xa8\x01-.\n\x0c\n\x04\x05\x02\x02\x05\x12\x04\xa9\
    \x01\x082\n\r\n\x05\x05\x02\x02\x05\x01\x12\x04\xa9\x01\x08-\n\r\n\x05\
    \x05\x02\x02\x05\x02\x12\x04\xa9\x0101\n\x0c\n\x02\x05\x03\x12\x06\xac\
    \x01\0\xc2\x01\x01\n\x0b\n\x03\x05\x03\x01\x12\x04\xac\x01\x05%\n\x0c\n\
    \x04\x05\x03\x02\0\x12\x04\xad\x01\x08;\n\r\n\x05\x05\x03\x02\0\x01\x12\
    \x04\xad\x01\x083\n\r\n\x05\x05\x03\x02\0\x02\x12\x04\xad\x016:\n\x0c\n\
    \x04\x05\x03\x02\x01\x12\x04\xae\x01\x08>\n\r\n\x05\x05\x03\x02\x01\x01\
    \x12\x04\xae\x01\x086\n\r\n\x05\x05\x03\x02\x01\x02\x12\x04\xae\x019=\n\
    \x0c\n\x04\x05\x03\x02\x02\x12\x04\xaf\x01\x08A\n\r\n\x05\x05\x03\x02\
    \x02\x01\x12\x04\xaf\x01\x089\n\r\n\x05\x05\x03\x02\x02\x02\x12\x04\xaf\
    \x01<@\n\x0c\n\x04\x05\x03\x02\x03\x12\x04\xb0\x01\x08@\n\r\n\x05\x05\
    \x03\x02\x03\x01\x12\x04\xb0\x01\x088\n\r\n\x05\x05\x03\x02\x03\x02\x12\
    \x04\xb0\x01;?\n\x0c\n\x04\x05\x03\x02\x04\x12\x04\xb1\x01\x08@\n\r\n\
    \x05\x05\x03\x02\x04\x01\x12\x04\xb1\x01\x088\n\r\n\x05\x05\x03\x02\x04\
    \x02\x12\x04\xb1\x01;?\n\x0c\n\x04\x05\x03\x02\x05\x12\x04\xb2\x01\x08A\
    \n\r\n\x05\x05\x03\x02\x05\x01\x12\x04\xb2\x01\x089\n\r\n\x05\x05\x03\
    \x02\x05\x02\x12\x04\xb2\x01<@\n\x0c\n\x04\x05\x03\x02\x06\x12\x04\xb3\
    \x01\x08>\n\r\n\x05\x05\x03\x02\x06\x01\x12\x04\xb3\x01\x086\n\r\n\x05\
    \x05\x03\x02\x06\x02\x12\x04\xb3\x019=\n\x0c\n\x04\x05\x03\x02\x07\x12\
    \x04\xb4\x01\x08@\n\r\n\x05\x05\x03\x02\x07\x01\x12\x04\xb4\x01\x088\n\r\
    \n\x05\x05\x03\x02\x07\x02\x12\x04\xb4\x01;?\n\x0c\n\x04\x05\x03\x02\x08\
    \x12\x04\xb5\x01\x08@\n\r\n\x05\x05\x03\x02\x08\x01\x12\x04\xb5\x01\x088\
    \n\r\n\x05\x05\x03\x02\x08\x02\x12\x04\xb5\x01;?\n\x0c\n\x04\x05\x03\x02\
    \t\x12\x04\xb6\x01\x08?\n\r\n\x05\x05\x03\x02\t\x01\x12\x04\xb6\x01\x087\
    \n\r\n\x05\x05\x03\x02\t\x02\x12\x04\xb6\x01:>\n\x0c\n\x04\x05\x03\x02\n\
    \x12\x04\xb7\x01\x08A\n\r\n\x05\x05\x03\x02\n\x01\x12\x04\xb7\x01\x089\n\
    \r\n\x05\x05\x03\x02\n\x02\x12\x04\xb7\x01<@\n\x0c\n\x04\x05\x03\x02\x0b\
    \x12\x04\xb8\x01\x08@\n\r\n\x05\x05\x03\x02\x0b\x01\x12\x04\xb8\x01\x088\
    \n\r\n\x05\x05\x03\x02\x0b\x02\x12\x04\xb8\x01;?\n\x0c\n\x04\x05\x03\x02\
    \x0c\x12\x04\xb9\x01\x08?\n\r\n\x05\x05\x03\x02\x0c\x01\x12\x04\xb9\x01\
    \x087\n\r\n\x05\x05\x03\x02\x0c\x02\x12\x04\xb9\x01:>\n\x0c\n\x04\x05\
    \x03\x02\r\x12\x04\xba\x01\x08?\n\r\n\x05\x05\x03\x02\r\x01\x12\x04\xba\
    \x01\x087\n\r\n\x05\x05\x03\x02\r\x02\x12\x04\xba\x01:>\n\x0c\n\x04\x05\
    \x03\x02\x0e\x12\x04\xbb\x01\x08>\n\r\n\x05\x05\x03\x02\x0e\x01\x12\x04\
    \xbb\x01\x086\n\r\n\x05\x05\x03\x02\x0e\x02\x12\x04\xbb\x019=\n\x0c\n\
    \x04\x05\x03\x02\x0f\x12\x04\xbc\x01\x08=\n\r\n\x05\x05\x03\x02\x0f\x01\
    \x12\x04\xbc\x01\x085\n\r\n\x05\x05\x03\x02\x0f\x02\x12\x04\xbc\x018<\n\
    \x0c\n\x04\x05\x03\x02\x10\x12\x04\xbd\x01\x08C\n\r\n\x05\x05\x03\x02\
    \x10\x01\x12\x04\xbd\x01\x08;\n\r\n\x05\x05\x03\x02\x10\x02\x12\x04\xbd\
    \x01>B\n\x0c\n\x04\x05\x03\x02\x11\x12\x04\xbe\x01\x08H\n\r\n\x05\x05\
    \x03\x02\x11\x01\x12\x04\xbe\x01\x08@\n\r\n\x05\x05\x03\x02\x11\x02\x12\
    \x04\xbe\x01CG\n\x0c\n\x04\x05\x03\x02\x12\x12\x04\xbf\x01\x08A\n\r\n\
    \x05\x05\x03\x02\x12\x01\x12\x04\xbf\x01\x089\n\r\n\x05\x05\x03\x02\x12\
    \x02\x12\x04\xbf\x01<@\n\x0c\n\x04\x05\x03\x02\x13\x12\x04\xc0\x01\x08C\
    \n\r\n\x05\x05\x03\x02\x13\x01\x12\x04\xc0\x01\x08;\n\r\n\x05\x05\x03\
    \x02\x13\x02\x12\x04\xc0\x01>B\n\x0c\n\x04\x05\x03\x02\x14\x12\x04\xc1\
    \x01\x08L\n\r\n\x05\x05\x03\x02\x14\x01\x12\x04\xc1\x01\x08D\n\r\n\x05\
    \x05\x03\x02\x14\x02\x12\x04\xc1\x01GK\n\x0c\n\x02\x04\0\x12\x06\xc4\x01\
    \0\xca\x01\x01\n\x0b\n\x03\x04\0\x01\x12\x04\xc4\x01\x08\x19\n\x0c\n\x04\
    \x04\0\x02\0\x12\x04\xc5\x01\x08&\n\r\n\x05\x04\0\x02\0\x04\x12\x04\xc5\
    \x01\x08\x10\n\r\n\x05\x04\0\x02\0\x05\x12\x04\xc5\x01\x11\x17\n\r\n\x05\
    \x04\0\x02\0\x01\x12\x04\xc5\x01\x18!\n\r\n\x05\x04\0\x02\0\x03\x12\x04\
    \xc5\x01$%\n\x0c\n\x04\x04\0\x02\x01\x12\x04\xc6\x01\x08)\n\r\n\x05\x04\
    \0\x02\x01\x04\x12\x04\xc6\x01\x08\x10\n\r\n\x05\x04\0\x02\x01\x05\x12\
    \x04\xc6\x01\x11\x17\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\xc6\x01\x18$\n\
    \r\n\x05\x04\0\x02\x01\x03\x12\x04\xc6\x01'(\n\x0c\n\x04\x04\0\x02\x02\
    \x12\x04\xc7\x01\x08/\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\xc7\x01\x08\
    \x10\n\r\n\x05\x04\0\x02\x02\x05\x12\x04\xc7\x01\x11\x17\n\r\n\x05\x04\0\
    \x02\x02\x01\x12\x04\xc7\x01\x18*\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\
    \xc7\x01-.\n\x0c\n\x04\x04\0\x02\x03\x12\x04\xc8\x01\x084\n\r\n\x05\x04\
    \0\x02\x03\x04\x12\x04\xc8\x01\x08\x10\n\r\n\x05\x04\0\x02\x03\x05\x12\
    \x04\xc8\x01\x11\x17\n\r\n\x05\x04\0\x02\x03\x01\x12\x04\xc8\x01\x18/\n\
    \r\n\x05\x04\0\x02\x03\x03\x12\x04\xc8\x0123\n\x0c\n\x04\x04\0\x02\x04\
    \x12\x04\xc9\x01\x082\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\xc9\x01\x08\
    \x10\n\r\n\x05\x04\0\x02\x04\x05\x12\x04\xc9\x01\x11\x17\n\r\n\x05\x04\0\
    \x02\x04\x01\x12\x04\xc9\x01\x18-\n\r\n\x05\x04\0\x02\x04\x03\x12\x04\
    \xc9\x0101\n\x0c\n\x02\x04\x01\x12\x06\xcc\x01\0\xcf\x01\x01\n\x0b\n\x03\
    \x04\x01\x01\x12\x04\xcc\x01\x08\x1a\n\x0c\n\x04\x04\x01\x02\0\x12\x04\
    \xcd\x01\x08.\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\xcd\x01\x08\x10\n\r\n\
    \x05\x04\x01\x02\0\x05\x12\x04\xcd\x01\x11\x17\n\r\n\x05\x04\x01\x02\0\
    \x01\x12\x04\xcd\x01\x18)\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xcd\x01,-\
    \n\x0c\n\x04\x04\x01\x02\x01\x12\x04\xce\x01\x08)\n\r\n\x05\x04\x01\x02\
    \x01\x04\x12\x04\xce\x01\x08\x10\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\
    \xce\x01\x11\x17\n\r\n\x05\x04\x01\x02\x01\x01\x12\x04\xce\x01\x18$\n\r\
    \n\x05\x04\x01\x02\x01\x03\x12\x04\xce\x01'(\n\x0c\n\x02\x04\x02\x12\x06\
    \xd1\x01\0\xd4\x01\x01\n\x0b\n\x03\x04\x02\x01\x12\x04\xd1\x01\x08\x16\n\
    \x0c\n\x04\x04\x02\x02\0\x12\x04\xd2\x01\x08+\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04\xd2\x01\x08\x10\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\xd2\x01\
    \x11\x17\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xd2\x01\x18&\n\r\n\x05\x04\
    \x02\x02\0\x03\x12\x04\xd2\x01)*\n\x0c\n\x04\x04\x02\x02\x01\x12\x04\xd3\
    \x01\x08)\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\xd3\x01\x08\x10\n\r\n\
    \x05\x04\x02\x02\x01\x05\x12\x04\xd3\x01\x11\x17\n\r\n\x05\x04\x02\x02\
    \x01\x01\x12\x04\xd3\x01\x18$\n\r\n\x05\x04\x02\x02\x01\x03\x12\x04\xd3\
    \x01'(\n\x0c\n\x02\x04\x03\x12\x06\xd6\x01\0\xd8\x01\x01\n\x0b\n\x03\x04\
    \x03\x01\x12\x04\xd6\x01\x08.\n\x0c\n\x04\x04\x03\x02\0\x12\x04\xd7\x01\
    \x08\"\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\xd7\x01\x08\x10\n\r\n\x05\x04\
    \x03\x02\0\x05\x12\x04\xd7\x01\x11\x17\n\r\n\x05\x04\x03\x02\0\x01\x12\
    \x04\xd7\x01\x18\x1d\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xd7\x01\x20!\n\
    \x0c\n\x02\x04\x04\x12\x06\xda\x01\0\xdd\x01\x01\n\x0b\n\x03\x04\x04\x01\
    \x12\x04\xda\x01\x08+\n\x0c\n\x04\x04\x04\x02\0\x12\x04\xdb\x01\x08$\n\r\
    \n\x05\x04\x04\x02\0\x04\x12\x04\xdb\x01\x08\x10\n\r\n\x05\x04\x04\x02\0\
    \x05\x12\x04\xdb\x01\x11\x17\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xdb\x01\
    \x18\x1f\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xdb\x01\"#\n\x0c\n\x04\x04\
    \x04\x02\x01\x12\x04\xdc\x01\x08$\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04\
    \xdc\x01\x08\x10\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\xdc\x01\x11\x17\n\
    \r\n\x05\x04\x04\x02\x01\x01\x12\x04\xdc\x01\x18\x1f\n\r\n\x05\x04\x04\
    \x02\x01\x03\x12\x04\xdc\x01\"#\n\x0c\n\x02\x04\x05\x12\x06\xdf\x01\0\
    \xe1\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\xdf\x01\x08\x19\n\x0c\n\x04\
    \x04\x05\x02\0\x12\x04\xe0\x01\x08\"\n\r\n\x05\x04\x05\x02\0\x04\x12\x04\
    \xe0\x01\x08\x10\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xe0\x01\x11\x17\n\r\
    \n\x05\x04\x05\x02\0\x01\x12\x04\xe0\x01\x18\x1d\n\r\n\x05\x04\x05\x02\0\
    \x03\x12\x04\xe0\x01\x20!\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::steammessages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(CMsgGCGiftedItems::generated_message_descriptor_data());
            messages.push(CMsgApplyAutograph::generated_message_descriptor_data());
            messages.push(CMsgCasketItem::generated_message_descriptor_data());
            messages.push(CMsgGCUserTrackTimePlayedConsecutively::generated_message_descriptor_data());
            messages.push(CMsgGCItemCustomizationNotification::generated_message_descriptor_data());
            messages.push(CAttribute_String::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(4);
            enums.push(EGCItemMsg::generated_enum_descriptor_data());
            enums.push(EGCMsgResponse::generated_enum_descriptor_data());
            enums.push(EUnlockStyle::generated_enum_descriptor_data());
            enums.push(EGCItemCustomizationNotification::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
